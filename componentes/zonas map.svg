<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="https://launchpad.net/jessyink"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="1280"
   height="720"
   viewBox="0 0 338.66666 190.50001"
   version="1.1"
   id="svg2436"
   inkscape:version="0.92+devel (unknown)"
   sodipodi:docname="zonas map.svg">
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.25190679"
     inkscape:cx="1193.7853"
     inkscape:cy="-372.75526"
     inkscape:document-units="mm"
     inkscape:current-layer="layer1"
     inkscape:document-rotation="0"
     showgrid="false"
     units="px"
     borderlayer="true"
     inkscape:showpageshadow="false"
     inkscape:window-width="1366"
     inkscape:window-height="716"
     inkscape:window-x="0"
     inkscape:window-y="24"
     inkscape:window-maximized="1" />
  <defs
     id="defs2430" />
  <metadata
     id="metadata2433">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     transform="translate(0,-106.49998)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <rect
       y="106.63098"
       x="0.13100272"
       height="190.23801"
       width="338.40466"
       id="rect2573"
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round" />
    <path
       ns1:effectOut="name:fade;order:4;length:500"
       ns1:effectIn="name:fade;order:3;length:500"
       id="path155287"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 673.38477 166.375 L 657.30273 175.6582 L 641.22266 184.94336 L 657.30273 194.22852 L 641.22266 203.51172 L 625.14062 212.79688 L 609.05859 222.08203 L 592.97852 231.36719 L 576.89648 240.65039 L 560.81445 231.36719 L 576.89648 222.08203 L 560.81445 212.79688 L 576.89648 203.51172 L 560.81445 194.22852 L 576.89648 184.94336 L 560.81445 175.6582 L 544.73438 184.94336 L 528.65234 194.22852 L 544.73438 203.51172 L 528.65234 212.79688 L 544.73438 222.08203 L 528.65234 231.36719 L 512.57031 222.08203 L 528.65234 212.79688 L 512.57031 203.51172 L 496.49023 194.22852 L 480.4082 184.94336 L 464.32617 194.22852 L 448.24609 203.51172 L 432.16406 194.22852 L 416.08203 203.51172 L 400.00195 212.79688 L 383.91992 222.08203 L 367.83789 212.79688 L 351.75781 203.51172 L 335.67578 194.22852 L 319.59375 184.94336 L 303.51367 194.22852 L 319.59375 203.51172 L 335.67578 212.79688 L 351.75781 222.08203 L 335.67578 231.36719 L 319.59375 240.65039 L 335.67578 249.93555 L 351.75781 259.2207 L 335.67578 268.50391 L 351.75781 277.78906 L 367.83789 287.07422 L 383.91992 296.35742 L 367.83789 305.64258 L 351.75781 314.92773 L 335.67578 305.64258 L 319.59375 296.35742 L 303.51367 305.64258 L 287.43164 314.92773 L 303.51367 324.21289 L 319.59375 333.49609 L 335.67578 342.78125 L 351.75781 352.06641 L 367.83789 361.34961 L 383.91992 370.63477 L 367.83789 379.91992 L 351.75781 370.63477 L 335.67578 379.91992 L 319.59375 389.20508 L 303.51367 379.91992 L 287.43164 370.63477 L 271.34961 361.34961 L 255.26953 370.63477 L 239.1875 361.34961 L 223.10742 370.63477 L 207.02539 379.91992 L 223.10742 389.20508 L 239.1875 379.91992 L 255.26953 389.20508 L 271.34961 398.48828 L 287.43164 407.77344 L 303.51367 417.05859 L 319.59375 407.77344 L 335.67578 417.05859 L 351.75781 426.3418 L 367.83789 435.62695 L 383.91992 426.3418 L 400.00195 417.05859 L 383.91992 407.77344 L 400.00195 398.48828 L 383.91992 389.20508 L 400.00195 379.91992 L 416.08203 370.63477 L 432.16406 361.34961 L 448.24609 352.06641 L 432.16406 342.78125 L 416.08203 333.49609 L 432.16406 324.21289 L 416.08203 314.92773 L 400.00195 305.64258 L 416.08203 296.35742 L 432.16406 287.07422 L 448.24609 277.78906 L 464.32617 268.50391 L 480.4082 259.2207 L 496.49023 249.93555 L 512.57031 240.65039 L 528.65234 249.93555 L 544.73438 259.2207 L 528.65234 268.50391 L 544.73438 277.78906 L 528.65234 287.07422 L 512.57031 296.35742 L 496.49023 305.64258 L 480.4082 314.92773 L 496.49023 324.21289 L 480.4082 333.49609 L 464.32617 342.78125 L 448.24609 352.06641 L 464.32617 361.34961 L 480.4082 370.63477 L 496.49023 379.91992 L 480.4082 389.20508 L 496.49023 398.48828 L 480.4082 407.77344 L 464.32617 417.05859 L 480.4082 426.3418 L 464.32617 435.62695 L 480.4082 444.91211 L 464.32617 454.19531 L 448.24609 463.48047 L 432.16406 454.19531 L 416.08203 463.48047 L 400.00195 472.76562 L 416.08203 482.05078 L 400.00195 491.33398 L 383.91992 500.61914 L 400.00195 509.9043 L 416.08203 519.1875 L 400.00195 528.47266 L 383.91992 537.75781 L 400.00195 547.04297 L 416.08203 556.32617 L 432.16406 565.61133 L 448.24609 556.32617 L 464.32617 547.04297 L 480.4082 537.75781 L 496.49023 547.04297 L 512.57031 556.32617 L 496.49023 565.61133 L 480.4082 574.89648 L 464.32617 584.17969 L 448.24609 593.46484 L 432.16406 584.17969 L 416.08203 593.46484 L 400.00195 602.75 L 416.08203 612.0332 L 432.16406 621.31836 L 448.24609 630.60352 L 432.16406 639.88867 L 448.24609 649.17188 L 464.32617 639.88867 L 480.4082 649.17188 L 496.49023 639.88867 L 512.57031 649.17188 L 528.65234 658.45703 L 544.73438 667.74219 L 560.81445 658.45703 L 576.89648 649.17188 L 560.81445 639.88867 L 576.89648 630.60352 L 592.97852 621.31836 L 609.05859 612.0332 L 592.97852 602.75 L 576.89648 593.46484 L 592.97852 584.17969 L 609.05859 574.89648 L 592.97852 565.61133 L 609.05859 556.32617 L 625.14062 547.04297 L 641.22266 537.75781 L 657.30273 528.47266 L 673.38477 519.1875 L 657.30273 509.9043 L 641.22266 519.1875 L 625.14062 528.47266 L 609.05859 519.1875 L 625.14062 509.9043 L 641.22266 500.61914 L 625.14062 491.33398 L 641.22266 482.05078 L 657.30273 472.76562 L 673.38477 482.05078 L 689.4668 491.33398 L 705.54688 482.05078 L 689.4668 472.76562 L 673.38477 463.48047 L 689.4668 454.19531 L 705.54688 444.91211 L 689.4668 435.62695 L 673.38477 426.3418 L 689.4668 417.05859 L 673.38477 407.77344 L 657.30273 398.48828 L 673.38477 389.20508 L 657.30273 379.91992 L 673.38477 370.63477 L 657.30273 361.34961 L 673.38477 352.06641 L 689.4668 342.78125 L 673.38477 333.49609 L 689.4668 324.21289 L 705.54688 314.92773 L 689.4668 305.64258 L 705.54688 296.35742 L 721.62891 287.07422 L 737.71094 277.78906 L 721.62891 268.50391 L 737.71094 259.2207 L 753.79102 249.93555 L 769.87305 240.65039 L 753.79102 231.36719 L 737.71094 222.08203 L 721.62891 212.79688 L 705.54688 203.51172 L 721.62891 194.22852 L 705.54688 184.94336 L 689.4668 175.6582 L 673.38477 166.375 z M 287.43164 203.51172 L 271.34961 212.79688 L 287.43164 222.08203 L 303.51367 231.36719 L 319.59375 222.08203 L 303.51367 212.79688 L 287.43164 203.51172 z M 190.94336 314.92773 L 174.86328 324.21289 L 158.78125 333.49609 L 174.86328 342.78125 L 190.94336 333.49609 L 207.02539 342.78125 L 223.10742 333.49609 L 239.1875 324.21289 L 223.10742 314.92773 L 207.02539 324.21289 L 190.94336 314.92773 z M 110.53711 324.21289 L 94.455078 333.49609 L 78.375 342.78125 L 62.292969 352.06641 L 78.375 361.34961 L 94.455078 370.63477 L 110.53711 361.34961 L 126.61914 352.06641 L 142.69922 342.78125 L 126.61914 333.49609 L 110.53711 324.21289 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 135.61756,111.21494 -4.25452,2.4567 4.25452,2.4567 -4.25452,2.45618 4.25452,2.45669 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45618 4.25504,-2.4567 4.25451,-2.45669 -4.25451,-2.45618 -4.25504,2.45618 -4.25504,-2.45618 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.45669 4.25504,-2.45618 -4.25504,-2.4567 -4.25452,-2.4567 -4.25504,2.4567 z m 72.33306,12.28297 -4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.45669 4.25452,2.4567 4.25504,2.45618 4.25503,2.4567 4.25452,-2.4567 -4.25452,-2.45618 4.25452,-2.4567 -4.25452,-2.45669 -4.25503,-2.45618 4.25503,-2.4567 -4.25503,-2.4567 -4.25504,-2.45618 z m -148.920116,12.28246 -4.255037,2.45669 4.255037,2.4567 4.254521,-2.4567 z m 136.155516,0 -4.25503,2.45669 -4.25504,2.4567 -4.25452,2.45618 4.25452,2.4567 -4.25452,2.4567 4.25452,2.4567 4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 4.25503,-2.4567 4.25452,2.4567 4.25504,2.45618 -4.25504,2.4567 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.45618 -4.25452,-2.4567 -4.25504,-2.4567 -4.25452,-2.4567 4.25452,-2.45618 -4.25504,-2.4567 z m -12.76459,7.36957 -4.25504,-2.45618 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,2.4567 4.25504,-2.4567 z m -50.20779,10.31772 -4.25452,2.4567 4.25452,2.45618 3.40392,1.96525 4.25504,2.4567 4.25504,-2.4567 -4.25504,-2.45618 -3.40392,-1.96525 z m 7.65896,9.33483 -4.25504,2.4567 4.25504,2.4567 4.25504,-2.4567 z m 17.01964,-4.91288 -4.25504,2.45618 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.4567 4.25504,2.45618 4.25504,-2.45618 4.25451,-2.4567 4.25504,-2.4567 -4.25504,-2.4567 z m -21.27468,12.28246 -4.25452,2.4567 -4.25503,2.45669 -4.25504,2.45618 -4.25452,2.4567 -4.25504,2.4567 -4.25504,2.45618 -4.25452,2.4567 4.25452,2.45669 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.4567 4.25503,-2.45618 -4.25503,-2.4567 4.25503,-2.45669 4.25452,-2.4567 4.25504,-2.45618 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.45669 z m -17.01911,29.47882 -4.25504,2.45618 -4.25504,2.4567 -4.25452,2.45669 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 -4.255034,2.45669 4.255034,2.4567 4.25504,2.45618 4.25452,2.4567 4.25504,-2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.45618 4.25504,-2.4567 4.25503,-2.4567 -4.25503,-2.45618 4.25503,-2.4567 -4.25503,-2.45669 -4.25504,-2.4567 z m -63.822983,22.10872 -4.255038,2.4567 -4.254521,2.45618 4.254521,2.4567 4.255038,-2.4567 4.255037,2.4567 4.254521,2.4567 4.255037,-2.4567 4.254521,-2.4567 -4.254521,-2.45618 -4.255037,-2.4567 -4.254521,2.4567 z m 42.548309,9.82628 -4.25452,2.4567 4.25452,2.45618 -4.25452,2.4567 -4.25504,2.45669 4.25504,2.45618 4.25452,2.4567 4.255034,2.4567 4.25504,-2.4567 4.25452,-2.4567 -4.25452,-2.45618 -4.25504,-2.45669 4.25504,-2.4567 4.25452,-2.45618 -4.25452,-2.4567 -4.25504,2.4567 z m 29.784234,17.19585 -4.25504,2.4567 -4.25452,2.45618 -4.25504,2.4567 4.25504,2.45669 4.25452,2.45618 4.25504,-2.45618 4.25503,-2.45669 4.25452,-2.4567 -4.25452,-2.45618 z m -42.548834,4.91288 -4.254519,2.4567 4.254519,2.45669 4.25504,-2.45669 z m 12.7646,12.28297 -4.25452,2.45618 4.25452,2.4567 -4.25452,2.4567 -4.25504,2.45669 -4.25504,2.45618 -4.254519,2.4567 -4.255037,-2.4567 -4.255037,2.4567 -4.254521,2.4567 -4.255037,2.45618 4.255037,2.4567 4.254521,2.45669 4.255037,2.4567 4.255037,2.45618 4.254519,-2.45618 4.25504,-2.4567 4.25504,-2.45669 4.25452,-2.4567 4.255034,-2.45618 4.25504,2.45618 4.25452,-2.45618 4.25504,2.45618 4.25504,-2.45618 4.25452,-2.4567 4.25504,2.4567 4.25503,-2.4567 4.25452,2.4567 4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.45618 -4.25503,2.45618 -4.25504,-2.45618 -4.25452,2.45618 -4.25504,-2.45618 -4.25504,-2.45669 -4.25452,-2.4567 -4.25504,-2.4567 z"
       id="path155293"
       inkscape:connector-curvature="0" />
    <rect
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round"
       id="rect3380"
       width="338.40466"
       height="190.23801"
       x="0.13100272"
       y="-105.0357" />
    <path
       ns1:effectOut="name:fade;order:2;length:500"
       ns1:effectIn="name:fade;order:1;length:500"
       id="path3382"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 512.57031 -782.17969 L 496.49023 -772.89453 L 512.57031 -763.60938 L 496.49023 -754.32617 L 512.57031 -745.04102 L 528.65234 -735.75586 L 544.73438 -726.4707 L 528.65234 -717.1875 L 544.73438 -707.90234 L 528.65234 -698.61719 L 544.73438 -689.33398 L 528.65234 -680.04883 L 544.73438 -670.76367 L 528.65234 -661.48047 L 544.73438 -652.19531 L 560.81445 -661.48047 L 576.89648 -670.76367 L 592.97852 -680.04883 L 609.05859 -689.33398 L 592.97852 -698.61719 L 576.89648 -689.33398 L 560.81445 -698.61719 L 576.89648 -707.90234 L 560.81445 -717.1875 L 576.89648 -726.4707 L 560.81445 -735.75586 L 576.89648 -745.04102 L 560.81445 -754.32617 L 576.89648 -763.60938 L 560.81445 -772.89453 L 544.73438 -782.17969 L 528.65234 -772.89453 L 512.57031 -782.17969 z M 785.95508 -735.75586 L 769.87305 -726.4707 L 753.79102 -717.1875 L 769.87305 -707.90234 L 785.95508 -698.61719 L 769.87305 -689.33398 L 785.95508 -680.04883 L 802.03516 -670.76367 L 818.11719 -661.48047 L 834.19922 -652.19531 L 850.2793 -661.48047 L 834.19922 -670.76367 L 850.2793 -680.04883 L 834.19922 -689.33398 L 818.11719 -698.61719 L 834.19922 -707.90234 L 818.11719 -717.1875 L 802.03516 -726.4707 L 785.95508 -735.75586 z M 223.10742 -689.33398 L 207.02539 -680.04883 L 223.10742 -670.76367 L 239.1875 -680.04883 L 223.10742 -689.33398 z M 737.71094 -689.33398 L 721.62891 -680.04883 L 705.54688 -670.76367 L 689.4668 -661.48047 L 705.54688 -652.19531 L 689.4668 -642.91016 L 705.54688 -633.625 L 721.62891 -624.3418 L 705.54688 -615.05664 L 689.4668 -624.3418 L 673.38477 -633.625 L 657.30273 -624.3418 L 641.22266 -615.05664 L 657.30273 -605.77148 L 641.22266 -596.48828 L 625.14062 -587.20312 L 609.05859 -596.48828 L 592.97852 -605.77148 L 576.89648 -596.48828 L 560.81445 -605.77148 L 576.89648 -615.05664 L 560.81445 -624.3418 L 544.73438 -615.05664 L 528.65234 -605.77148 L 515.78711 -613.19922 L 499.70508 -622.48438 L 483.625 -613.19922 L 480.4082 -615.05664 L 464.32617 -605.77148 L 448.24609 -596.48828 L 432.16406 -605.77148 L 416.08203 -596.48828 L 400.00195 -587.20312 L 383.91992 -577.91797 L 367.83789 -587.20312 L 351.75781 -596.48828 L 335.67578 -605.77148 L 319.59375 -615.05664 L 303.51367 -605.77148 L 319.59375 -596.48828 L 335.67578 -587.20312 L 351.75781 -577.91797 L 335.67578 -568.63281 L 319.59375 -559.34961 L 335.67578 -550.06445 L 351.75781 -540.7793 L 335.67578 -531.49609 L 351.75781 -522.21094 L 367.83789 -512.92578 L 383.91992 -503.64258 L 367.83789 -494.35742 L 351.75781 -485.07227 L 335.67578 -494.35742 L 319.59375 -503.64258 L 303.51367 -494.35742 L 287.43164 -485.07227 L 303.51367 -475.78711 L 319.59375 -466.50391 L 335.67578 -457.21875 L 351.75781 -447.93359 L 367.83789 -438.65039 L 383.91992 -429.36523 L 367.83789 -420.08008 L 351.75781 -429.36523 L 335.67578 -420.08008 L 319.59375 -410.79492 L 303.51367 -420.08008 L 287.43164 -429.36523 L 271.34961 -438.65039 L 255.26953 -429.36523 L 239.1875 -438.65039 L 223.10742 -429.36523 L 207.02539 -420.08008 L 223.10742 -410.79492 L 239.1875 -420.08008 L 255.26953 -410.79492 L 271.34961 -401.51172 L 287.43164 -392.22656 L 303.51367 -382.94141 L 319.59375 -392.22656 L 335.67578 -382.94141 L 351.75781 -373.6582 L 367.83789 -364.37305 L 383.91992 -355.08789 L 400.00195 -345.80469 L 416.08203 -336.51953 L 400.00195 -327.23438 L 383.91992 -317.94922 L 367.83789 -327.23438 L 351.75781 -317.94922 L 367.83789 -308.66602 L 351.75781 -299.38086 L 335.67578 -290.0957 L 351.75781 -280.8125 L 367.83789 -271.52734 L 383.91992 -262.24219 L 400.00195 -252.95703 L 416.08203 -243.67383 L 432.16406 -234.38867 L 448.24609 -225.10352 L 464.32617 -215.82031 L 448.24609 -206.53516 L 432.16406 -215.82031 L 416.08203 -206.53516 L 400.00195 -197.25 L 416.08203 -187.9668 L 432.16406 -178.68164 L 448.24609 -169.39648 L 432.16406 -160.11133 L 416.08203 -169.39648 L 400.00195 -178.68164 L 383.91992 -187.9668 L 367.83789 -197.25 L 351.75781 -187.9668 L 367.83789 -178.68164 L 351.75781 -169.39648 L 335.67578 -160.11133 L 319.59375 -150.82812 L 303.51367 -141.54297 L 287.43164 -150.82812 L 271.34961 -141.54297 L 255.26953 -132.25781 L 239.1875 -122.97461 L 255.26953 -113.68945 L 271.34961 -104.4043 L 287.43164 -95.119141 L 303.51367 -85.835938 L 319.59375 -95.119141 L 335.67578 -104.4043 L 351.75781 -113.68945 L 367.83789 -122.97461 L 383.91992 -132.25781 L 400.00195 -122.97461 L 416.08203 -132.25781 L 432.16406 -122.97461 L 448.24609 -132.25781 L 464.32617 -141.54297 L 480.4082 -132.25781 L 496.49023 -141.54297 L 512.57031 -132.25781 L 528.65234 -141.54297 L 544.73438 -132.25781 L 560.81445 -141.54297 L 576.89648 -150.82812 L 560.81445 -160.11133 L 576.89648 -169.39648 L 592.97852 -178.68164 L 609.05859 -187.9668 L 592.97852 -197.25 L 576.89648 -206.53516 L 592.97852 -215.82031 L 609.05859 -225.10352 L 592.97852 -234.38867 L 609.05859 -243.67383 L 625.14062 -252.95703 L 641.22266 -262.24219 L 657.30273 -271.52734 L 673.38477 -280.8125 L 657.30273 -290.0957 L 641.22266 -280.8125 L 625.14062 -271.52734 L 609.05859 -280.8125 L 625.14062 -290.0957 L 641.22266 -299.38086 L 625.14062 -308.66602 L 609.05859 -317.94922 L 592.97852 -327.23438 L 576.89648 -336.51953 L 560.81445 -345.80469 L 544.73438 -355.08789 L 528.65234 -364.37305 L 512.57031 -373.6582 L 528.65234 -382.94141 L 544.73438 -373.6582 L 560.81445 -382.94141 L 576.89648 -392.22656 L 560.81445 -401.51172 L 544.73438 -410.79492 L 560.81445 -420.08008 L 576.89648 -429.36523 L 592.97852 -438.65039 L 609.05859 -447.93359 L 625.14062 -457.21875 L 609.05859 -466.50391 L 592.97852 -475.78711 L 609.05859 -485.07227 L 625.14062 -475.78711 L 641.22266 -485.07227 L 625.14062 -494.35742 L 641.22266 -503.64258 L 657.30273 -512.92578 L 673.38477 -522.21094 L 689.4668 -531.49609 L 705.54688 -540.7793 L 721.62891 -531.49609 L 737.71094 -540.7793 L 753.79102 -550.06445 L 769.87305 -559.34961 L 753.79102 -568.63281 L 737.71094 -577.91797 L 721.62891 -587.20312 L 705.54688 -596.48828 L 721.62891 -605.77148 L 737.71094 -615.05664 L 753.79102 -605.77148 L 769.87305 -596.48828 L 753.79102 -587.20312 L 769.87305 -577.91797 L 785.95508 -587.20312 L 802.03516 -596.48828 L 818.11719 -605.77148 L 802.03516 -615.05664 L 818.11719 -624.3418 L 802.03516 -633.625 L 785.95508 -642.91016 L 769.87305 -652.19531 L 753.79297 -661.48047 L 769.87305 -670.76367 L 753.79102 -680.04883 L 737.71094 -689.33398 z M 689.4668 -661.48047 L 673.38477 -670.76367 L 657.30273 -680.04883 L 641.22266 -670.76367 L 625.14062 -661.48047 L 641.22266 -652.19531 L 657.30273 -642.91016 L 673.38477 -652.19531 L 689.4668 -661.48047 z M 287.43164 -596.48828 L 271.34961 -587.20312 L 287.43164 -577.91797 L 303.51367 -568.63281 L 319.59375 -577.91797 L 303.51367 -587.20312 L 287.43164 -596.48828 z M 190.94336 -485.07227 L 174.86328 -475.78711 L 158.78125 -466.50391 L 174.86328 -457.21875 L 190.94336 -466.50391 L 207.02539 -457.21875 L 223.10742 -466.50391 L 239.1875 -475.78711 L 223.10742 -485.07227 L 207.02539 -475.78711 L 190.94336 -485.07227 z M 110.53711 -475.78711 L 94.455078 -466.50391 L 78.375 -457.21875 L 62.292969 -447.93359 L 78.375 -438.65039 L 94.455078 -429.36523 L 110.53711 -438.65039 L 126.61914 -447.93359 L 142.69922 -457.21875 L 126.61914 -466.50391 L 110.53711 -475.78711 z M 207.02539 -364.37305 L 190.94336 -355.08789 L 174.86328 -345.80469 L 190.94336 -336.51953 L 207.02539 -345.80469 L 223.10742 -336.51953 L 239.1875 -327.23438 L 255.26953 -336.51953 L 271.34961 -345.80469 L 255.26953 -355.08789 L 239.1875 -364.37305 L 223.10742 -355.08789 L 207.02539 -364.37305 z M 319.59375 -243.67383 L 303.51367 -234.38867 L 319.59375 -225.10352 L 335.67578 -234.38867 L 319.59375 -243.67383 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3390"
       d="m 186.67595,-36.581192 -4.25453,2.45618 -4.25503,2.4567 -4.25504,2.4567 -4.25452,2.456183 -4.25504,2.4567 4.25504,2.45669 -4.25504,2.4567 -4.25504,-2.4567 -4.25452,2.4567 4.25452,2.45618 4.25504,2.456703 -4.25504,2.4567 -4.25452,2.4561804 -4.25504,2.4567 -4.25503,2.456693 -4.25452,2.4567 4.25452,2.45618027 4.25503,2.45670003 -4.25503,2.456703 -4.25452,2.45618 -4.25504,-2.45618 -4.25504,2.45618 4.25504,2.4566903 4.25504,2.4567 4.25452,2.45618 4.25503,2.456703 4.25504,2.4567 4.25452,2.4567 4.25504,2.45618 4.25504,-2.45618 4.25452,-2.4567 4.25504,2.4567 4.25503,2.45618 4.25453,-2.45618 -4.25453,-2.4567 -4.25503,-2.4567 4.25503,-2.456703 4.25453,-2.45618 -4.25453,-2.4567 -4.25503,-2.4566903 4.25503,-2.45618 -4.25503,-2.456703 -4.25504,-2.45670003 4.25504,-2.45618027 -4.25504,-2.4567 4.25504,-2.456693 -4.25504,-2.4567 4.25504,-2.4561804 4.25503,-2.4567 -4.25503,-2.456703 4.25503,-2.45618 4.25453,-2.4567 -4.25453,-2.45669 4.25453,-2.4567 4.25503,-2.456183 4.25504,-2.4567 -4.25504,-2.4567 z"
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <rect
       y="-105.0357"
       x="365.25592"
       height="190.23801"
       width="338.40466"
       id="rect3396"
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round" />
    <path
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 513.50715,-58.690436 -4.25452,2.45669 -4.25504,2.4567 4.25504,2.456179 -4.25504,2.4567 4.25504,2.456703 -4.25504,2.4567 4.25504,2.456179 -4.25504,2.4567 4.25504,2.456693 -4.25504,2.45618 4.25504,2.4567 -4.25504,2.4567 -4.25504,2.456183 -4.25452,2.4567 -4.25503,2.45669 4.25503,2.4567 -4.25503,2.45618 -4.25504,2.456703 -4.25452,2.4567 4.25452,2.4561804 4.25504,2.4567 4.25503,2.456693 -4.25503,2.4567 4.25503,2.45618027 -4.25503,2.45670003 -4.25504,2.456703 4.25504,2.45618 -4.25504,2.4566903 4.25504,2.4567 4.25503,2.45618 4.25452,2.456703 4.25504,2.4567 4.25504,2.4567 4.25452,2.45618 4.25504,-2.45618 4.25504,2.45618 -4.25504,2.456703 -4.25504,2.45669 -4.25452,2.456177 -4.25504,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25503,2.456697 4.25503,2.4567 4.25452,2.456177 -4.25452,2.4567 -4.25503,2.45669 -4.25504,2.456177 -4.25452,2.4567 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.4567 4.25452,2.45618 4.25504,2.456703 4.25504,2.4567 -4.25504,2.45669 4.25504,2.45618 4.25452,-2.45618 4.25504,2.45618 4.25503,-2.45618 4.25452,2.45618 4.25504,2.456703 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.456703 -4.25504,-2.45618 4.25504,-2.45669 4.25504,-2.4567 4.25451,-2.456703 -4.25451,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 4.25451,-2.456177 -4.25451,-2.45669 4.25451,-2.4567 4.25504,-2.456177 4.25504,-2.4567 4.25452,-2.456697 4.25504,-2.4567 -4.25504,-2.456177 -4.25452,2.456177 -4.25504,2.4567 -4.25504,-2.4567 4.25504,-2.456177 4.25504,-2.45669 -4.25504,-2.456703 -4.25504,-2.45618 -4.25451,-2.4567 -4.25504,-2.4567 -4.25504,-2.456703 -4.25452,-2.45618 -4.25504,-2.4567 -4.25504,-2.4566903 4.25504,-2.45618 4.25504,2.45618 4.25452,-2.45618 4.25504,-2.456703 -4.25504,-2.45670003 -4.25452,-2.45618027 4.25452,-2.4567 4.25504,-2.456693 4.25504,-2.4567 4.25451,-2.4561804 4.25504,-2.4567 -4.25504,-2.456703 -4.25451,-2.45618 4.25451,-2.4567 4.25504,2.4567 4.25504,-2.4567 -4.25504,-2.45669 4.25504,-2.4567 4.25452,-2.456183 4.25504,-2.4567 4.25504,-2.4567 4.25452,-2.45618 4.25504,2.45618 4.25503,-2.45618 4.25452,-2.456693 4.25504,-2.4567 -4.25504,-2.456179 -4.25452,2.456179 -4.25503,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,-2.4567 4.25504,-2.456179 -4.25504,-2.4567 -4.25504,-2.456703 -4.25452,-2.4567 -4.25504,2.4567 -4.25504,2.456703 -4.25451,2.4567 -4.25504,2.456179 -4.25504,-2.456179 4.25504,-2.4567 -4.25504,-2.456703 4.25504,-2.4567 -4.25504,-2.456179 4.25504,-2.4567 z"
       id="path3398"
       inkscape:connector-curvature="0" />
    <path
       id="path3400"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 1892.5703 -782.17969 L 1876.4902 -772.89453 L 1892.5703 -763.60938 L 1876.4902 -754.32617 L 1892.5703 -745.04102 L 1908.6523 -735.75586 L 1924.7344 -726.4707 L 1908.6523 -717.1875 L 1924.7344 -707.90234 L 1908.6523 -698.61719 L 1924.7344 -689.33398 L 1908.6523 -680.04883 L 1924.7344 -670.76367 L 1908.6523 -661.48047 L 1924.7344 -652.19531 L 1940.8145 -661.48047 L 1956.8965 -670.76367 L 1972.9785 -680.04883 L 1989.0586 -689.33398 L 1972.9785 -698.61719 L 1956.8965 -689.33398 L 1940.8145 -698.61719 L 1956.8965 -707.90234 L 1940.8145 -717.1875 L 1956.8965 -726.4707 L 1940.8145 -735.75586 L 1956.8965 -745.04102 L 1940.8145 -754.32617 L 1956.8965 -763.60938 L 1940.8145 -772.89453 L 1924.7344 -782.17969 L 1908.6523 -772.89453 L 1892.5703 -782.17969 z M 2165.9551 -735.75586 L 2149.873 -726.4707 L 2133.791 -717.1875 L 2149.873 -707.90234 L 2165.9551 -698.61719 L 2149.873 -689.33398 L 2165.9551 -680.04883 L 2182.0352 -670.76367 L 2198.1172 -661.48047 L 2214.1992 -652.19531 L 2230.2793 -661.48047 L 2214.1992 -670.76367 L 2230.2793 -680.04883 L 2214.1992 -689.33398 L 2198.1172 -698.61719 L 2214.1992 -707.90234 L 2198.1172 -717.1875 L 2182.0352 -726.4707 L 2165.9551 -735.75586 z M 1603.1074 -689.33398 L 1587.0254 -680.04883 L 1603.1074 -670.76367 L 1619.1875 -680.04883 L 1603.1074 -689.33398 z M 2117.7109 -689.33398 L 2101.6289 -680.04883 L 2085.5469 -670.76367 L 2069.4668 -661.48047 L 2085.5469 -652.19531 L 2069.4668 -642.91016 L 2085.5469 -633.625 L 2101.6289 -624.3418 L 2085.5469 -615.05664 L 2069.4668 -624.3418 L 2053.3848 -633.625 L 2037.3027 -624.3418 L 2021.2227 -615.05664 L 2037.3027 -605.77148 L 2021.2227 -596.48828 L 2037.3027 -587.20312 L 2053.3848 -577.91797 L 2069.4668 -568.63281 L 2053.3848 -559.34961 L 2069.4668 -550.06445 L 2085.5469 -559.34961 L 2101.6289 -550.06445 L 2117.7109 -559.34961 L 2133.791 -568.63281 L 2117.7109 -577.91797 L 2101.6289 -587.20312 L 2085.5469 -596.48828 L 2101.6289 -605.77148 L 2117.7109 -615.05664 L 2133.791 -605.77148 L 2149.873 -596.48828 L 2133.791 -587.20312 L 2149.873 -577.91797 L 2165.9551 -587.20312 L 2182.0352 -596.48828 L 2198.1172 -605.77148 L 2182.0352 -615.05664 L 2198.1172 -624.3418 L 2182.0352 -633.625 L 2165.9551 -642.91016 L 2149.873 -652.19531 L 2133.793 -661.48047 L 2149.873 -670.76367 L 2133.791 -680.04883 L 2117.7109 -689.33398 z M 2069.4668 -661.48047 L 2053.3848 -670.76367 L 2037.3027 -680.04883 L 2021.2227 -670.76367 L 2005.1406 -661.48047 L 2021.2227 -652.19531 L 2037.3027 -642.91016 L 2053.3848 -652.19531 L 2069.4668 -661.48047 z M 1879.7051 -622.48438 L 1863.625 -613.19922 L 1860.4082 -615.05664 L 1844.3262 -605.77148 L 1828.2461 -596.48828 L 1812.1641 -605.77148 L 1796.082 -596.48828 L 1780.002 -587.20312 L 1763.9199 -577.91797 L 1747.8379 -587.20312 L 1731.7578 -596.48828 L 1715.6758 -605.77148 L 1699.5938 -615.05664 L 1683.5137 -605.77148 L 1699.5938 -596.48828 L 1715.6758 -587.20312 L 1731.7578 -577.91797 L 1715.6758 -568.63281 L 1699.5938 -559.34961 L 1715.6758 -550.06445 L 1731.7578 -540.7793 L 1715.6758 -531.49609 L 1731.7578 -522.21094 L 1747.8379 -512.92578 L 1763.9199 -503.64258 L 1747.8379 -494.35742 L 1731.7578 -485.07227 L 1715.6758 -494.35742 L 1699.5938 -503.64258 L 1683.5137 -494.35742 L 1667.4316 -485.07227 L 1683.5137 -475.78711 L 1699.5938 -466.50391 L 1715.6758 -457.21875 L 1731.7578 -447.93359 L 1747.8379 -438.65039 L 1763.9199 -429.36523 L 1747.8379 -420.08008 L 1731.7578 -429.36523 L 1715.6758 -420.08008 L 1699.5938 -410.79492 L 1683.5137 -420.08008 L 1667.4316 -429.36523 L 1651.3496 -438.65039 L 1635.2695 -429.36523 L 1619.1875 -438.65039 L 1603.1074 -429.36523 L 1587.0254 -420.08008 L 1603.1074 -410.79492 L 1619.1875 -420.08008 L 1635.2695 -410.79492 L 1651.3496 -401.51172 L 1667.4316 -392.22656 L 1683.5137 -382.94141 L 1699.5938 -392.22656 L 1715.6758 -382.94141 L 1731.7578 -373.6582 L 1747.8379 -364.37305 L 1763.9199 -355.08789 L 1780.002 -345.80469 L 1796.082 -336.51953 L 1780.002 -327.23438 L 1763.9199 -317.94922 L 1747.8379 -327.23438 L 1731.7578 -317.94922 L 1747.8379 -308.66602 L 1731.7578 -299.38086 L 1715.6758 -290.0957 L 1731.7578 -280.8125 L 1747.8379 -271.52734 L 1763.9199 -262.24219 L 1780.002 -252.95703 L 1796.082 -243.67383 L 1812.1641 -234.38867 L 1828.2461 -225.10352 L 1844.3262 -215.82031 L 1860.4082 -225.10352 L 1876.4902 -234.38867 L 1892.5703 -243.67383 L 1876.4902 -252.95703 L 1860.4082 -262.24219 L 1876.4902 -271.52734 L 1892.5703 -280.8125 L 1908.6523 -271.52734 L 1924.7344 -280.8125 L 1940.8145 -290.0957 L 1956.8965 -299.38086 L 1972.9785 -308.66602 L 1956.8965 -317.94922 L 1940.8145 -308.66602 L 1924.7344 -317.94922 L 1908.6523 -327.23438 L 1892.5703 -336.51953 L 1876.4902 -345.80469 L 1860.4082 -355.08789 L 1844.3262 -364.37305 L 1860.4082 -373.6582 L 1844.3262 -382.94141 L 1860.4082 -392.22656 L 1876.4902 -401.51172 L 1860.4082 -410.79492 L 1876.4902 -420.08008 L 1860.4082 -429.36523 L 1844.3262 -438.65039 L 1828.2461 -447.93359 L 1844.3262 -457.21875 L 1860.4082 -466.50391 L 1876.4902 -475.78711 L 1860.4082 -485.07227 L 1876.4902 -494.35742 L 1892.5703 -503.64258 L 1908.6523 -512.92578 L 1924.7344 -522.21094 L 1908.6523 -531.49609 L 1924.7344 -540.7793 L 1908.6523 -550.06445 L 1924.7344 -559.34961 L 1908.6523 -568.63281 L 1924.7344 -577.91797 L 1908.6523 -587.20312 L 1924.7344 -596.48828 L 1908.6523 -605.77148 L 1895.7871 -613.19922 L 1879.7051 -622.48438 z M 1972.9785 -605.77148 L 1956.8965 -596.48828 L 1940.8145 -587.20312 L 1956.8965 -577.91797 L 1940.8145 -568.63281 L 1956.8965 -559.34961 L 1972.9785 -568.63281 L 1989.0586 -577.91797 L 2005.1406 -587.20312 L 1989.0586 -596.48828 L 1972.9785 -605.77148 z M 1667.4316 -596.48828 L 1651.3496 -587.20312 L 1667.4316 -577.91797 L 1683.5137 -568.63281 L 1699.5938 -577.91797 L 1683.5137 -587.20312 L 1667.4316 -596.48828 z M 2085.5469 -540.7793 L 2069.4668 -531.49609 L 2053.3848 -522.21094 L 2037.3027 -512.92578 L 2021.2227 -503.64258 L 2005.1406 -494.35742 L 2021.2227 -485.07227 L 2005.1406 -475.78711 L 1989.0586 -485.07227 L 1972.9785 -475.78711 L 1989.0586 -466.50391 L 2005.1406 -457.21875 L 1989.0586 -447.93359 L 1972.9785 -438.65039 L 1956.8965 -429.36523 L 1940.8145 -420.08008 L 1924.7344 -410.79492 L 1940.8145 -401.51172 L 1956.8965 -392.22656 L 1940.8145 -382.94141 L 1924.7344 -373.6582 L 1908.6523 -382.94141 L 1892.5703 -373.6582 L 1908.6523 -364.37305 L 1924.7344 -355.08789 L 1940.8145 -345.80469 L 1956.8965 -336.51953 L 1972.9785 -327.23438 L 1989.0586 -317.94922 L 2005.1406 -308.66602 L 2021.2227 -317.94922 L 2037.3027 -327.23438 L 2053.3848 -317.94922 L 2069.4668 -308.66602 L 2085.5469 -317.94922 L 2069.4668 -327.23438 L 2053.3848 -336.51953 L 2069.4668 -345.80469 L 2085.5469 -355.08789 L 2069.4668 -364.37305 L 2053.3848 -373.6582 L 2069.4668 -382.94141 L 2053.3848 -392.22656 L 2037.3027 -401.51172 L 2053.3848 -410.79492 L 2037.3027 -420.08008 L 2053.3848 -429.36523 L 2037.3027 -438.65039 L 2053.3848 -447.93359 L 2069.4668 -457.21875 L 2053.3848 -466.50391 L 2069.4668 -475.78711 L 2085.5469 -485.07227 L 2069.4668 -494.35742 L 2085.5469 -503.64258 L 2101.6289 -512.92578 L 2117.7109 -522.21094 L 2101.6289 -531.49609 L 2085.5469 -540.7793 z M 1570.9434 -485.07227 L 1554.8633 -475.78711 L 1538.7812 -466.50391 L 1554.8633 -457.21875 L 1570.9434 -466.50391 L 1587.0254 -457.21875 L 1603.1074 -466.50391 L 1619.1875 -475.78711 L 1603.1074 -485.07227 L 1587.0254 -475.78711 L 1570.9434 -485.07227 z M 1490.5371 -475.78711 L 1474.4551 -466.50391 L 1458.375 -457.21875 L 1442.293 -447.93359 L 1458.375 -438.65039 L 1474.4551 -429.36523 L 1490.5371 -438.65039 L 1506.6191 -447.93359 L 1522.6992 -457.21875 L 1506.6191 -466.50391 L 1490.5371 -475.78711 z M 1587.0254 -364.37305 L 1570.9434 -355.08789 L 1554.8633 -345.80469 L 1570.9434 -336.51953 L 1587.0254 -345.80469 L 1603.1074 -336.51953 L 1619.1875 -327.23438 L 1635.2695 -336.51953 L 1651.3496 -345.80469 L 1635.2695 -355.08789 L 1619.1875 -364.37305 L 1603.1074 -355.08789 L 1587.0254 -364.37305 z M 1699.5938 -243.67383 L 1683.5137 -234.38867 L 1699.5938 -225.10352 L 1715.6758 -234.38867 L 1699.5938 -243.67383 z M 1747.8379 -197.25 L 1731.7578 -187.9668 L 1747.8379 -178.68164 L 1731.7578 -169.39648 L 1715.6758 -160.11133 L 1699.5938 -150.82812 L 1683.5137 -141.54297 L 1667.4316 -150.82812 L 1651.3496 -141.54297 L 1635.2695 -132.25781 L 1619.1875 -122.97461 L 1635.2695 -113.68945 L 1651.3496 -104.4043 L 1667.4316 -95.119141 L 1683.5137 -85.835938 L 1699.5938 -95.119141 L 1715.6758 -104.4043 L 1731.7578 -113.68945 L 1747.8379 -122.97461 L 1763.9199 -132.25781 L 1780.002 -122.97461 L 1796.082 -132.25781 L 1812.1641 -122.97461 L 1828.2461 -132.25781 L 1844.3262 -141.54297 L 1860.4082 -132.25781 L 1876.4902 -141.54297 L 1892.5703 -132.25781 L 1908.6523 -141.54297 L 1892.5703 -150.82812 L 1876.4902 -160.11133 L 1860.4082 -150.82812 L 1844.3262 -160.11133 L 1828.2461 -150.82812 L 1812.1641 -160.11133 L 1796.082 -169.39648 L 1780.002 -178.68164 L 1763.9199 -187.9668 L 1747.8379 -197.25 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       ns1:effectIn="name:fade;order:2;length:500"
       ns1:effectOut="name:fade;order:3;length:500" />
    <rect
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round"
       id="rect3412"
       width="338.40466"
       height="190.23801"
       x="365.25592"
       y="106.63097" />
    <path
       id="path3414"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 1892.5703 17.820312 L 1876.4902 27.105469 L 1892.5703 36.390625 L 1876.4902 45.673828 L 1892.5703 54.958984 L 1908.6523 64.244141 L 1924.7344 73.529297 L 1908.6523 82.8125 L 1924.7344 92.097656 L 1908.6523 101.38281 L 1924.7344 110.66602 L 1908.6523 119.95117 L 1924.7344 129.23633 L 1908.6523 138.51953 L 1924.7344 147.80469 L 1940.8145 138.51953 L 1956.8965 129.23633 L 1972.9785 119.95117 L 1989.0586 110.66602 L 1972.9785 101.38281 L 1956.8965 110.66602 L 1940.8145 101.38281 L 1956.8965 92.097656 L 1940.8145 82.8125 L 1956.8965 73.529297 L 1940.8145 64.244141 L 1956.8965 54.958984 L 1940.8145 45.673828 L 1956.8965 36.390625 L 1940.8145 27.105469 L 1924.7344 17.820312 L 1908.6523 27.105469 L 1892.5703 17.820312 z M 2165.9551 64.244141 L 2149.873 73.529297 L 2133.791 82.8125 L 2149.873 92.097656 L 2165.9551 101.38281 L 2149.873 110.66602 L 2165.9551 119.95117 L 2182.0352 129.23633 L 2198.1172 138.51953 L 2214.1992 147.80469 L 2230.2793 138.51953 L 2214.1992 129.23633 L 2230.2793 119.95117 L 2214.1992 110.66602 L 2198.1172 101.38281 L 2214.1992 92.097656 L 2198.1172 82.8125 L 2182.0352 73.529297 L 2165.9551 64.244141 z M 1603.1074 110.66602 L 1587.0254 119.95117 L 1603.1074 129.23633 L 1619.1875 119.95117 L 1603.1074 110.66602 z M 2117.7109 110.66602 L 2101.6289 119.95117 L 2085.5469 129.23633 L 2069.4668 138.51953 L 2085.5469 147.80469 L 2069.4668 157.08984 L 2085.5469 166.375 L 2101.6289 175.6582 L 2085.5469 184.94336 L 2101.6289 194.22852 L 2117.7109 184.94336 L 2133.791 194.22852 L 2149.873 203.51172 L 2133.791 212.79688 L 2149.873 222.08203 L 2165.9551 212.79688 L 2182.0352 203.51172 L 2198.1172 194.22852 L 2182.0352 184.94336 L 2198.1172 175.6582 L 2182.0352 166.375 L 2165.9551 157.08984 L 2149.873 147.80469 L 2133.793 138.51953 L 2149.873 129.23633 L 2133.791 119.95117 L 2117.7109 110.66602 z M 2069.4668 138.51953 L 2053.3848 129.23633 L 2037.3027 119.95117 L 2021.2227 129.23633 L 2005.1406 138.51953 L 2021.2227 147.80469 L 2037.3027 157.08984 L 2053.3848 147.80469 L 2069.4668 138.51953 z M 1940.8145 175.6582 L 1924.7344 184.94336 L 1908.6523 194.22852 L 1895.7871 186.80078 L 1879.7051 177.51562 L 1863.625 186.80078 L 1860.4082 184.94336 L 1844.3262 194.22852 L 1828.2461 203.51172 L 1812.1641 194.22852 L 1796.082 203.51172 L 1780.002 212.79688 L 1763.9199 222.08203 L 1747.8379 212.79688 L 1731.7578 203.51172 L 1715.6758 194.22852 L 1699.5938 184.94336 L 1683.5137 194.22852 L 1699.5938 203.51172 L 1715.6758 212.79688 L 1731.7578 222.08203 L 1715.6758 231.36719 L 1699.5938 240.65039 L 1715.6758 249.93555 L 1731.7578 259.2207 L 1715.6758 268.50391 L 1731.7578 277.78906 L 1747.8379 287.07422 L 1763.9199 296.35742 L 1747.8379 305.64258 L 1731.7578 314.92773 L 1715.6758 305.64258 L 1699.5938 296.35742 L 1683.5137 305.64258 L 1667.4316 314.92773 L 1683.5137 324.21289 L 1699.5938 333.49609 L 1715.6758 342.78125 L 1731.7578 352.06641 L 1747.8379 361.34961 L 1763.9199 370.63477 L 1747.8379 379.91992 L 1731.7578 370.63477 L 1715.6758 379.91992 L 1699.5938 389.20508 L 1683.5137 379.91992 L 1667.4316 370.63477 L 1651.3496 361.34961 L 1635.2695 370.63477 L 1619.1875 361.34961 L 1603.1074 370.63477 L 1587.0254 379.91992 L 1603.1074 389.20508 L 1619.1875 379.91992 L 1635.2695 389.20508 L 1651.3496 398.48828 L 1667.4316 407.77344 L 1683.5137 417.05859 L 1699.5938 407.77344 L 1715.6758 417.05859 L 1731.7578 426.3418 L 1747.8379 435.62695 L 1763.9199 444.91211 L 1780.002 454.19531 L 1796.082 463.48047 L 1780.002 472.76562 L 1763.9199 482.05078 L 1747.8379 472.76562 L 1731.7578 482.05078 L 1747.8379 491.33398 L 1731.7578 500.61914 L 1715.6758 509.9043 L 1731.7578 519.1875 L 1747.8379 528.47266 L 1763.9199 537.75781 L 1780.002 547.04297 L 1796.082 556.32617 L 1812.1641 565.61133 L 1828.2461 574.89648 L 1844.3262 584.17969 L 1828.2461 593.46484 L 1812.1641 584.17969 L 1796.082 593.46484 L 1780.002 602.75 L 1796.082 612.0332 L 1812.1641 621.31836 L 1828.2461 630.60352 L 1812.1641 639.88867 L 1796.082 630.60352 L 1780.002 621.31836 L 1763.9199 612.0332 L 1747.8379 602.75 L 1731.7578 612.0332 L 1747.8379 621.31836 L 1731.7578 630.60352 L 1715.6758 639.88867 L 1699.5938 649.17188 L 1683.5137 658.45703 L 1667.4316 649.17188 L 1651.3496 658.45703 L 1635.2695 667.74219 L 1619.1875 677.02539 L 1635.2695 686.31055 L 1651.3496 695.5957 L 1667.4316 704.88086 L 1683.5137 714.16406 L 1699.5938 704.88086 L 1715.6758 695.5957 L 1731.7578 686.31055 L 1747.8379 677.02539 L 1763.9199 667.74219 L 1780.002 677.02539 L 1796.082 667.74219 L 1812.1641 677.02539 L 1828.2461 667.74219 L 1844.3262 658.45703 L 1860.4082 667.74219 L 1876.4902 658.45703 L 1892.5703 667.74219 L 1908.6523 658.45703 L 1924.7344 667.74219 L 1940.8145 658.45703 L 1956.8965 649.17188 L 1940.8145 639.88867 L 1956.8965 630.60352 L 1972.9785 621.31836 L 1989.0586 612.0332 L 1972.9785 602.75 L 1956.8965 593.46484 L 1972.9785 584.17969 L 1989.0586 574.89648 L 1972.9785 565.61133 L 1989.0586 556.32617 L 2005.1406 547.04297 L 2021.2227 537.75781 L 2037.3027 528.47266 L 2053.3848 519.1875 L 2037.3027 509.9043 L 2021.2227 519.1875 L 2005.1406 528.47266 L 1989.0586 519.1875 L 2005.1406 509.9043 L 2021.2227 500.61914 L 2005.1406 491.33398 L 2021.2227 482.05078 L 2037.3027 472.76562 L 2053.3848 482.05078 L 2069.4668 491.33398 L 2085.5469 482.05078 L 2069.4668 472.76562 L 2053.3848 463.48047 L 2069.4668 454.19531 L 2085.5469 444.91211 L 2069.4668 435.62695 L 2053.3848 426.3418 L 2069.4668 417.05859 L 2053.3848 407.77344 L 2037.3027 398.48828 L 2053.3848 389.20508 L 2037.3027 379.91992 L 2053.3848 370.63477 L 2037.3027 361.34961 L 2053.3848 352.06641 L 2069.4668 342.78125 L 2053.3848 333.49609 L 2069.4668 324.21289 L 2085.5469 314.92773 L 2069.4668 305.64258 L 2085.5469 296.35742 L 2101.6289 287.07422 L 2117.7109 277.78906 L 2101.6289 268.50391 L 2117.7109 259.2207 L 2133.791 249.93555 L 2149.873 240.65039 L 2133.791 231.36719 L 2117.7109 240.65039 L 2101.6289 249.93555 L 2085.5469 240.65039 L 2069.4668 249.93555 L 2053.3848 240.65039 L 2069.4668 231.36719 L 2053.3848 222.08203 L 2037.3027 212.79688 L 2021.2227 203.51172 L 2005.1406 212.79688 L 1989.0586 203.51172 L 1972.9785 194.22852 L 1956.8965 203.51172 L 1940.8145 194.22852 L 1956.8965 184.94336 L 1940.8145 175.6582 z M 1667.4316 203.51172 L 1651.3496 212.79688 L 1667.4316 222.08203 L 1683.5137 231.36719 L 1699.5938 222.08203 L 1683.5137 212.79688 L 1667.4316 203.51172 z M 1570.9434 314.92773 L 1554.8633 324.21289 L 1538.7812 333.49609 L 1554.8633 342.78125 L 1570.9434 333.49609 L 1587.0254 342.78125 L 1603.1074 333.49609 L 1619.1875 324.21289 L 1603.1074 314.92773 L 1587.0254 324.21289 L 1570.9434 314.92773 z M 1490.5371 324.21289 L 1474.4551 333.49609 L 1458.375 342.78125 L 1442.293 352.06641 L 1458.375 361.34961 L 1474.4551 370.63477 L 1490.5371 361.34961 L 1506.6191 352.06641 L 1522.6992 342.78125 L 1506.6191 333.49609 L 1490.5371 324.21289 z M 1587.0254 435.62695 L 1570.9434 444.91211 L 1554.8633 454.19531 L 1570.9434 463.48047 L 1587.0254 454.19531 L 1603.1074 463.48047 L 1619.1875 472.76562 L 1635.2695 463.48047 L 1651.3496 454.19531 L 1635.2695 444.91211 L 1619.1875 435.62695 L 1603.1074 444.91211 L 1587.0254 435.62695 z M 1699.5938 556.32617 L 1683.5137 565.61133 L 1699.5938 574.89648 L 1715.6758 565.61133 L 1699.5938 556.32617 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       ns1:effectIn="name:fade;order:4;length:500"
       ns1:effectOut="name:fade;order:5;length:500" />
    <path
       inkscape:connector-curvature="0"
       id="path3420"
       d="m 543.29138,150.52005 -4.25504,2.45618 -4.25452,2.45669 4.25452,2.4567 -4.25452,2.45619 4.25452,2.4567 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,-2.4567 4.25504,2.4567 4.25503,-2.4567 4.25452,-2.45618 -4.25452,-2.4567 -4.25503,-2.4567 -4.25504,-2.4567 4.25504,-2.45619 -4.25504,-2.4567 -4.25452,-2.45669 z"
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <rect
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round"
       id="rect3428"
       width="338.40466"
       height="190.23801"
       x="0.13100272"
       y="328.88101" />
    <path
       ns1:effectOut="name:fade;order:6;length:500"
       ns1:effectIn="name:fade;order:5;length:500"
       id="path3430"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 512.57031 857.82031 L 496.49023 867.10547 L 512.57031 876.39062 L 496.49023 885.67383 L 512.57031 894.95898 L 528.65234 904.24414 L 544.73438 913.5293 L 528.65234 922.8125 L 544.73438 932.09766 L 528.65234 941.38281 L 544.73438 950.66602 L 528.65234 959.95117 L 544.73438 969.23633 L 528.65234 978.51953 L 544.73438 987.80469 L 560.81445 978.51953 L 576.89648 969.23633 L 592.97852 959.95117 L 609.05859 950.66602 L 592.97852 941.38281 L 576.89648 950.66602 L 560.81445 941.38281 L 576.89648 932.09766 L 560.81445 922.8125 L 576.89648 913.5293 L 560.81445 904.24414 L 576.89648 894.95898 L 560.81445 885.67383 L 576.89648 876.39062 L 560.81445 867.10547 L 544.73438 857.82031 L 528.65234 867.10547 L 512.57031 857.82031 z M 785.95508 904.24414 L 769.87305 913.5293 L 753.79102 922.8125 L 769.87305 932.09766 L 785.95508 941.38281 L 769.87305 950.66602 L 785.95508 959.95117 L 802.03516 969.23633 L 818.11719 978.51953 L 834.19922 987.80469 L 850.2793 978.51953 L 834.19922 969.23633 L 850.2793 959.95117 L 834.19922 950.66602 L 818.11719 941.38281 L 834.19922 932.09766 L 818.11719 922.8125 L 802.03516 913.5293 L 785.95508 904.24414 z M 223.10742 950.66602 L 207.02539 959.95117 L 223.10742 969.23633 L 239.1875 959.95117 L 223.10742 950.66602 z M 737.71094 950.66602 L 721.62891 959.95117 L 705.54688 969.23633 L 689.4668 978.51953 L 705.54688 987.80469 L 689.4668 997.08984 L 705.54688 1006.375 L 721.62891 1015.6582 L 705.54688 1024.9434 L 689.4668 1015.6582 L 673.38477 1006.375 L 657.30273 1015.6582 L 641.22266 1024.9434 L 657.30273 1034.2285 L 641.22266 1043.5117 L 625.14062 1052.7969 L 609.05859 1043.5117 L 592.97852 1034.2285 L 576.89648 1043.5117 L 560.81445 1034.2285 L 576.89648 1024.9434 L 560.81445 1015.6582 L 544.73438 1024.9434 L 528.65234 1034.2285 L 515.78711 1026.8008 L 499.70508 1017.5156 L 483.625 1026.8008 L 499.70508 1036.084 L 512.57031 1043.5117 L 528.65234 1052.7969 L 512.57031 1062.082 L 528.65234 1071.3672 L 544.73438 1080.6504 L 528.65234 1089.9355 L 512.57031 1080.6504 L 496.49023 1089.9355 L 480.4082 1099.2207 L 464.32617 1108.5039 L 448.24609 1117.7891 L 432.16406 1127.0742 L 416.08203 1136.3574 L 400.00195 1145.6426 L 383.91992 1136.3574 L 367.83789 1145.6426 L 351.75781 1154.9277 L 335.67578 1145.6426 L 319.59375 1136.3574 L 303.51367 1145.6426 L 287.43164 1154.9277 L 303.51367 1164.2129 L 319.59375 1173.4961 L 335.67578 1182.7812 L 351.75781 1192.0664 L 367.83789 1201.3496 L 383.91992 1210.6348 L 367.83789 1219.9199 L 351.75781 1210.6348 L 335.67578 1219.9199 L 319.59375 1229.2051 L 303.51367 1219.9199 L 287.43164 1210.6348 L 271.34961 1201.3496 L 255.26953 1210.6348 L 239.1875 1201.3496 L 223.10742 1210.6348 L 207.02539 1219.9199 L 223.10742 1229.2051 L 239.1875 1219.9199 L 255.26953 1229.2051 L 271.34961 1238.4883 L 287.43164 1247.7734 L 303.51367 1257.0586 L 319.59375 1247.7734 L 335.67578 1257.0586 L 351.75781 1266.3418 L 367.83789 1275.627 L 383.91992 1284.9121 L 400.00195 1294.1953 L 416.08203 1303.4805 L 400.00195 1312.7656 L 383.91992 1322.0508 L 367.83789 1312.7656 L 351.75781 1322.0508 L 367.83789 1331.334 L 351.75781 1340.6191 L 335.67578 1349.9043 L 351.75781 1359.1875 L 367.83789 1368.4727 L 383.91992 1377.7578 L 400.00195 1387.043 L 416.08203 1396.3262 L 432.16406 1405.6113 L 448.24609 1414.8965 L 464.32617 1424.1797 L 448.24609 1433.4648 L 432.16406 1424.1797 L 416.08203 1433.4648 L 400.00195 1442.75 L 416.08203 1452.0332 L 432.16406 1461.3184 L 448.24609 1470.6035 L 432.16406 1479.8887 L 416.08203 1470.6035 L 400.00195 1461.3184 L 383.91992 1452.0332 L 367.83789 1442.75 L 351.75781 1452.0332 L 367.83789 1461.3184 L 351.75781 1470.6035 L 335.67578 1479.8887 L 319.59375 1489.1719 L 303.51367 1498.457 L 287.43164 1489.1719 L 271.34961 1498.457 L 255.26953 1507.7422 L 239.1875 1517.0254 L 255.26953 1526.3105 L 271.34961 1535.5957 L 287.43164 1544.8809 L 303.51367 1554.1641 L 319.59375 1544.8809 L 335.67578 1535.5957 L 351.75781 1526.3105 L 367.83789 1517.0254 L 383.91992 1507.7422 L 400.00195 1517.0254 L 416.08203 1507.7422 L 432.16406 1517.0254 L 448.24609 1507.7422 L 464.32617 1498.457 L 480.4082 1507.7422 L 496.49023 1498.457 L 512.57031 1507.7422 L 528.65234 1498.457 L 544.73438 1507.7422 L 560.81445 1498.457 L 576.89648 1489.1719 L 560.81445 1479.8887 L 576.89648 1470.6035 L 592.97852 1461.3184 L 609.05859 1452.0332 L 592.97852 1442.75 L 576.89648 1433.4648 L 592.97852 1424.1797 L 609.05859 1414.8965 L 592.97852 1405.6113 L 609.05859 1396.3262 L 625.14062 1387.043 L 641.22266 1377.7578 L 657.30273 1368.4727 L 673.38477 1359.1875 L 657.30273 1349.9043 L 641.22266 1359.1875 L 625.14062 1368.4727 L 609.05859 1359.1875 L 625.14062 1349.9043 L 641.22266 1340.6191 L 625.14062 1331.334 L 641.22266 1322.0508 L 657.30273 1312.7656 L 673.38477 1322.0508 L 689.4668 1331.334 L 705.54688 1322.0508 L 689.4668 1312.7656 L 673.38477 1303.4805 L 689.4668 1294.1953 L 705.54688 1284.9121 L 689.4668 1275.627 L 673.38477 1266.3418 L 689.4668 1257.0586 L 673.38477 1247.7734 L 657.30273 1238.4883 L 673.38477 1229.2051 L 657.30273 1219.9199 L 673.38477 1210.6348 L 657.30273 1201.3496 L 673.38477 1192.0664 L 689.4668 1182.7812 L 673.38477 1173.4961 L 689.4668 1164.2129 L 705.54688 1154.9277 L 689.4668 1145.6426 L 705.54688 1136.3574 L 721.62891 1127.0742 L 737.71094 1117.7891 L 721.62891 1108.5039 L 737.71094 1099.2207 L 753.79102 1089.9355 L 769.87305 1080.6504 L 753.79102 1071.3672 L 737.71094 1062.082 L 721.62891 1052.7969 L 705.54688 1043.5117 L 721.62891 1034.2285 L 737.71094 1024.9434 L 753.79102 1034.2285 L 769.87305 1043.5117 L 753.79102 1052.7969 L 769.87305 1062.082 L 785.95508 1052.7969 L 802.03516 1043.5117 L 818.11719 1034.2285 L 802.03516 1024.9434 L 818.11719 1015.6582 L 802.03516 1006.375 L 785.95508 997.08984 L 769.87305 987.80469 L 753.79297 978.51953 L 769.87305 969.23633 L 753.79102 959.95117 L 737.71094 950.66602 z M 689.4668 978.51953 L 673.38477 969.23633 L 657.30273 959.95117 L 641.22266 969.23633 L 625.14062 978.51953 L 641.22266 987.80469 L 657.30273 997.08984 L 673.38477 987.80469 L 689.4668 978.51953 z M 190.94336 1154.9277 L 174.86328 1164.2129 L 158.78125 1173.4961 L 174.86328 1182.7812 L 190.94336 1173.4961 L 207.02539 1182.7812 L 223.10742 1173.4961 L 239.1875 1164.2129 L 223.10742 1154.9277 L 207.02539 1164.2129 L 190.94336 1154.9277 z M 110.53711 1164.2129 L 94.455078 1173.4961 L 78.375 1182.7812 L 62.292969 1192.0664 L 78.375 1201.3496 L 94.455078 1210.6348 L 110.53711 1201.3496 L 126.61914 1192.0664 L 142.69922 1182.7812 L 126.61914 1173.4961 L 110.53711 1164.2129 z M 207.02539 1275.627 L 190.94336 1284.9121 L 174.86328 1294.1953 L 190.94336 1303.4805 L 207.02539 1294.1953 L 223.10742 1303.4805 L 239.1875 1312.7656 L 255.26953 1303.4805 L 271.34961 1294.1953 L 255.26953 1284.9121 L 239.1875 1275.627 L 223.10742 1284.9121 L 207.02539 1275.627 z M 319.59375 1396.3262 L 303.51367 1405.6113 L 319.59375 1414.8965 L 335.67578 1405.6113 L 319.59375 1396.3262 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3442"
       d="m 84.559179,377.68291 -4.25452,2.4567 4.25452,2.45618 4.255037,2.4567 4.255038,2.45669 -4.255038,2.4567 -4.255037,2.45618 4.255037,2.4567 4.255038,2.4567 -4.255038,2.45618 4.255038,2.45669 4.254521,2.4567 4.255035,2.45618 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45618 4.25503,-2.4567 4.25453,-2.45669 4.25503,-2.45618 4.25504,-2.4567 4.25452,-2.4567 4.25504,2.4567 4.25504,-2.4567 -4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.4567 -4.25452,-2.45618 -4.25504,-2.4567 -4.25503,2.4567 -4.25453,2.45618 -4.25503,-2.45618 -4.25504,2.45618 -4.25452,2.4567 -4.25504,2.45669 -4.255035,-2.45669 -4.254521,-2.4567 -4.255038,-2.45618 z m -8.509558,4.91288 -4.255037,2.4567 4.255037,2.45669 4.255038,2.4567 4.25452,-2.4567 -4.25452,-2.45669 z"
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <rect
       y="328.88098"
       x="365.25592"
       height="190.23801"
       width="338.40466"
       id="rect3444"
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round" />
    <path
       id="path3446"
       transform="matrix(0.26458333,0,0,0.26458333,0,106.49998)"
       d="M 1892.5703 857.82031 L 1876.4902 867.10547 L 1892.5703 876.39062 L 1876.4902 885.67383 L 1892.5703 894.95898 L 1908.6523 904.24414 L 1924.7344 913.5293 L 1908.6523 922.8125 L 1924.7344 932.09766 L 1908.6523 941.38281 L 1924.7344 950.66602 L 1908.6523 959.95117 L 1924.7344 969.23633 L 1908.6523 978.51953 L 1924.7344 987.80469 L 1940.8145 978.51953 L 1956.8965 969.23633 L 1972.9785 959.95117 L 1989.0586 950.66602 L 1972.9785 941.38281 L 1956.8965 950.66602 L 1940.8145 941.38281 L 1956.8965 932.09766 L 1940.8145 922.8125 L 1956.8965 913.5293 L 1940.8145 904.24414 L 1956.8965 894.95898 L 1940.8145 885.67383 L 1956.8965 876.39062 L 1940.8145 867.10547 L 1924.7344 857.82031 L 1908.6523 867.10547 L 1892.5703 857.82031 z M 2165.9551 904.24414 L 2149.873 913.5293 L 2133.791 922.8125 L 2149.873 932.09766 L 2165.9551 941.38281 L 2149.873 950.66602 L 2165.9551 959.95117 L 2182.0352 969.23633 L 2198.1172 978.51953 L 2214.1992 987.80469 L 2230.2793 978.51953 L 2214.1992 969.23633 L 2230.2793 959.95117 L 2214.1992 950.66602 L 2198.1172 941.38281 L 2214.1992 932.09766 L 2198.1172 922.8125 L 2182.0352 913.5293 L 2165.9551 904.24414 z M 1603.1074 950.66602 L 1587.0254 959.95117 L 1603.1074 969.23633 L 1619.1875 959.95117 L 1603.1074 950.66602 z M 2117.7109 950.66602 L 2101.6289 959.95117 L 2085.5469 969.23633 L 2069.4668 978.51953 L 2085.5469 987.80469 L 2069.4668 997.08984 L 2085.5469 1006.375 L 2101.6289 1015.6582 L 2085.5469 1024.9434 L 2069.4668 1015.6582 L 2053.3848 1006.375 L 2037.3027 1015.6582 L 2021.2227 1024.9434 L 2037.3027 1034.2285 L 2021.2227 1043.5117 L 2005.1406 1052.7969 L 1989.0586 1043.5117 L 1972.9785 1034.2285 L 1956.8965 1043.5117 L 1940.8145 1034.2285 L 1956.8965 1024.9434 L 1940.8145 1015.6582 L 1924.7344 1024.9434 L 1908.6523 1034.2285 L 1895.7871 1026.8008 L 1879.7051 1017.5156 L 1863.625 1026.8008 L 1860.4082 1024.9434 L 1844.3262 1034.2285 L 1828.2461 1043.5117 L 1812.1641 1034.2285 L 1796.082 1043.5117 L 1780.002 1052.7969 L 1763.9199 1062.082 L 1747.8379 1052.7969 L 1731.7578 1043.5117 L 1715.6758 1034.2285 L 1699.5938 1024.9434 L 1683.5137 1034.2285 L 1699.5938 1043.5117 L 1715.6758 1052.7969 L 1731.7578 1062.082 L 1715.6758 1071.3672 L 1699.5938 1080.6504 L 1715.6758 1089.9355 L 1731.7578 1099.2207 L 1715.6758 1108.5039 L 1731.7578 1117.7891 L 1747.8379 1127.0742 L 1763.9199 1136.3574 L 1780.002 1145.6426 L 1796.082 1154.9277 L 1812.1641 1164.2129 L 1796.082 1173.4961 L 1812.1641 1182.7812 L 1828.2461 1192.0664 L 1812.1641 1201.3496 L 1796.082 1210.6348 L 1780.002 1219.9199 L 1763.9199 1229.2051 L 1780.002 1238.4883 L 1763.9199 1247.7734 L 1780.002 1257.0586 L 1763.9199 1266.3418 L 1747.8379 1275.627 L 1763.9199 1284.9121 L 1780.002 1294.1953 L 1796.082 1303.4805 L 1780.002 1312.7656 L 1763.9199 1322.0508 L 1747.8379 1312.7656 L 1731.7578 1322.0508 L 1747.8379 1331.334 L 1731.7578 1340.6191 L 1715.6758 1349.9043 L 1731.7578 1359.1875 L 1747.8379 1368.4727 L 1763.9199 1377.7578 L 1780.002 1387.043 L 1796.082 1396.3262 L 1812.1641 1405.6113 L 1828.2461 1414.8965 L 1844.3262 1424.1797 L 1828.2461 1433.4648 L 1812.1641 1424.1797 L 1796.082 1433.4648 L 1780.002 1442.75 L 1796.082 1452.0332 L 1812.1641 1461.3184 L 1828.2461 1470.6035 L 1812.1641 1479.8887 L 1796.082 1470.6035 L 1780.002 1461.3184 L 1763.9199 1452.0332 L 1747.8379 1442.75 L 1731.7578 1452.0332 L 1747.8379 1461.3184 L 1731.7578 1470.6035 L 1715.6758 1479.8887 L 1699.5938 1489.1719 L 1683.5137 1498.457 L 1667.4316 1489.1719 L 1651.3496 1498.457 L 1635.2695 1507.7422 L 1619.1875 1517.0254 L 1635.2695 1526.3105 L 1651.3496 1535.5957 L 1667.4316 1544.8809 L 1683.5137 1554.1641 L 1699.5938 1544.8809 L 1715.6758 1535.5957 L 1731.7578 1526.3105 L 1747.8379 1517.0254 L 1763.9199 1507.7422 L 1780.002 1517.0254 L 1796.082 1507.7422 L 1812.1641 1517.0254 L 1828.2461 1507.7422 L 1844.3262 1498.457 L 1860.4082 1507.7422 L 1876.4902 1498.457 L 1892.5703 1507.7422 L 1908.6523 1498.457 L 1924.7344 1507.7422 L 1940.8145 1498.457 L 1956.8965 1489.1719 L 1940.8145 1479.8887 L 1956.8965 1470.6035 L 1972.9785 1461.3184 L 1989.0586 1452.0332 L 1972.9785 1442.75 L 1956.8965 1433.4648 L 1972.9785 1424.1797 L 1989.0586 1414.8965 L 1972.9785 1405.6113 L 1989.0586 1396.3262 L 2005.1406 1387.043 L 2021.2227 1377.7578 L 2037.3027 1368.4727 L 2053.3848 1359.1875 L 2037.3027 1349.9043 L 2021.2227 1359.1875 L 2005.1406 1368.4727 L 1989.0586 1359.1875 L 2005.1406 1349.9043 L 2021.2227 1340.6191 L 2005.1406 1331.334 L 2021.2227 1322.0508 L 2037.3027 1312.7656 L 2053.3848 1322.0508 L 2069.4668 1331.334 L 2085.5469 1322.0508 L 2069.4668 1312.7656 L 2053.3848 1303.4805 L 2069.4668 1294.1953 L 2085.5469 1284.9121 L 2069.4668 1275.627 L 2053.3848 1266.3418 L 2069.4668 1257.0586 L 2053.3848 1247.7734 L 2037.3027 1238.4883 L 2053.3848 1229.2051 L 2037.3027 1219.9199 L 2053.3848 1210.6348 L 2037.3027 1201.3496 L 2053.3848 1192.0664 L 2069.4668 1182.7812 L 2053.3848 1173.4961 L 2069.4668 1164.2129 L 2085.5469 1154.9277 L 2069.4668 1145.6426 L 2085.5469 1136.3574 L 2101.6289 1127.0742 L 2117.7109 1117.7891 L 2101.6289 1108.5039 L 2117.7109 1099.2207 L 2133.791 1089.9355 L 2149.873 1080.6504 L 2133.791 1071.3672 L 2117.7109 1062.082 L 2101.6289 1052.7969 L 2085.5469 1043.5117 L 2101.6289 1034.2285 L 2117.7109 1024.9434 L 2133.791 1034.2285 L 2149.873 1043.5117 L 2133.791 1052.7969 L 2149.873 1062.082 L 2165.9551 1052.7969 L 2182.0352 1043.5117 L 2198.1172 1034.2285 L 2182.0352 1024.9434 L 2198.1172 1015.6582 L 2182.0352 1006.375 L 2165.9551 997.08984 L 2149.873 987.80469 L 2133.793 978.51953 L 2149.873 969.23633 L 2133.791 959.95117 L 2117.7109 950.66602 z M 2069.4668 978.51953 L 2053.3848 969.23633 L 2037.3027 959.95117 L 2021.2227 969.23633 L 2005.1406 978.51953 L 2021.2227 987.80469 L 2037.3027 997.08984 L 2053.3848 987.80469 L 2069.4668 978.51953 z M 1667.4316 1043.5117 L 1651.3496 1052.7969 L 1667.4316 1062.082 L 1683.5137 1071.3672 L 1699.5938 1062.082 L 1683.5137 1052.7969 L 1667.4316 1043.5117 z M 1587.0254 1275.627 L 1570.9434 1284.9121 L 1554.8633 1294.1953 L 1570.9434 1303.4805 L 1587.0254 1294.1953 L 1603.1074 1303.4805 L 1619.1875 1312.7656 L 1635.2695 1303.4805 L 1651.3496 1294.1953 L 1635.2695 1284.9121 L 1619.1875 1275.627 L 1603.1074 1284.9121 L 1587.0254 1275.627 z M 1699.5938 1396.3262 L 1683.5137 1405.6113 L 1699.5938 1414.8965 L 1715.6758 1405.6113 L 1699.5938 1396.3262 z "
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       ns1:effectIn="name:fade;order:6;length:500"
       ns1:effectOut="name:fade;order:7;length:500" />
    <path
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 449.68417,407.16125 -4.25452,2.4567 -4.25504,2.45669 4.25504,2.45669 4.25452,2.45618 4.25503,2.45671 4.25504,2.4567 4.25452,2.45617 4.25504,2.4567 -4.25504,2.4567 -4.25452,-2.4567 -4.25504,2.4567 -4.25503,2.4567 -4.25452,-2.4567 -4.25504,-2.4567 -4.25504,-2.4567 -4.25451,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,2.4567 4.25451,2.45618 4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25503,2.4567 4.25504,2.45618 4.25452,2.4567 4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.45618 4.25504,-2.4567 4.25452,-2.4567 4.25504,-2.4567 4.25503,-2.45617 -4.25503,-2.4567 -4.25504,-2.45671 4.25504,-2.45618 -4.25504,-2.45669 -4.25452,-2.45669 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.45669 -4.25504,-2.45669 z m -34.03874,4.91339 -4.25452,2.45669 -4.25504,2.45618 4.25504,2.45671 4.25452,-2.45671 4.25503,2.45671 4.25504,-2.45671 4.25452,-2.45618 -4.25452,-2.45669 -4.25504,2.45669 z m -21.27415,2.45669 -4.25504,2.45618 -4.25452,2.45671 -4.25504,2.4567 4.25504,2.45617 4.25452,2.4567 4.25504,-2.4567 4.25503,-2.45617 4.25452,-2.4567 -4.25452,-2.45671 z"
       id="path3456"
       inkscape:connector-curvature="0" />
    <rect
       y="545.83942"
       x="0.13100272"
       height="190.23801"
       width="338.40466"
       id="rect3460"
       style="fill:#b8a650;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round" />
    <path
       ns1:effectOut="name:fade;order:8;length:500"
       ns1:effectIn="name:fade;order:7;length:500"
       inkscape:connector-curvature="0"
       id="path3462"
       d="m 135.61756,550.42327 -4.25452,2.4567 4.25452,2.45669 -4.25452,2.45618 4.25452,2.45671 4.25504,2.45668 4.25504,2.45671 -4.25504,2.45618 4.25504,2.45671 -4.25504,2.45668 4.25504,2.45618 -4.25504,2.45671 4.25504,2.45668 -4.25504,2.45618 4.25504,2.45671 4.25451,-2.45671 4.25504,-2.45618 4.25504,-2.45668 4.25452,-2.45671 -4.25452,-2.45618 -4.25504,2.45618 -4.25504,-2.45618 4.25504,-2.45668 -4.25504,-2.45671 4.25504,-2.45618 -4.25504,-2.45671 4.25504,-2.45668 -4.25504,-2.45671 4.25504,-2.45618 -4.25504,-2.45669 -4.25451,-2.4567 -4.25504,2.4567 z m 72.33305,12.28296 -4.25503,2.45671 -4.25504,2.45618 4.25504,2.45671 4.25503,2.45668 -4.25503,2.45618 4.25503,2.45671 4.25452,2.45668 4.25504,2.45618 4.25504,2.45671 4.25452,-2.45671 -4.25452,-2.45618 4.25452,-2.45668 -4.25452,-2.45671 -4.25504,-2.45618 4.25504,-2.45668 -4.25504,-2.45671 -4.25504,-2.45618 z m -148.920106,12.28246 -4.255037,2.45671 4.255037,2.45668 4.254521,-2.45668 z m 136.155516,0 -4.25504,2.45671 -4.25504,2.45668 -4.25452,2.45618 4.25452,2.45671 -4.25452,2.45668 4.25452,2.45671 4.25504,2.45618 -4.25504,2.45671 -4.25452,-2.45671 -4.25504,-2.45618 -4.25503,2.45618 -4.25452,2.45671 4.25452,2.45668 -4.25452,2.45618 -4.25504,2.45671 -4.25504,-2.45671 -4.25452,-2.45618 -4.25504,2.45618 -4.25504,-2.45618 4.25504,-2.45668 -4.25504,-2.45671 -4.25451,2.45671 -4.25504,2.45668 -3.40393,-1.96524 -4.25504,-2.45671 -4.25452,2.45671 -0.85111,-0.49144 -4.25504,2.45668 -4.25452,2.45618 -4.25503,-2.45618 -4.25504,2.45618 -4.25452,2.45671 -4.25504,2.45669 -4.255037,-2.45669 -4.25452,-2.45671 -4.255037,-2.45618 -4.255037,-2.45668 -4.254521,2.45668 4.254521,2.45618 4.255037,2.45671 4.255037,2.45669 -4.255037,2.45671 -4.255037,2.45618 4.255037,2.45668 4.255037,2.45671 -4.255037,2.45618 4.255037,2.45671 4.25452,2.45668 4.255037,2.45618 -4.255037,2.45671 -4.25452,2.45668 -4.255037,-2.45668 -4.255037,-2.45671 -4.254521,2.45671 -4.255038,2.45668 4.255038,2.45671 4.254521,2.45618 4.255037,2.45668 4.255037,2.45671 4.25452,2.45618 4.255037,2.45671 -4.255037,2.45668 -4.25452,-2.45668 -4.255037,2.45668 -4.255037,2.45671 -4.254521,-2.45671 -4.255038,-2.45668 -4.255037,-2.45671 -4.254521,2.45671 -4.255037,-2.45671 -4.254521,2.45671 -4.255037,2.45668 4.255037,2.45671 4.254521,-2.45671 4.255037,2.45671 4.254521,2.45618 4.255037,2.45669 4.255038,2.4567 4.254521,-2.4567 4.255037,2.4567 4.255037,2.45618 4.25452,2.45671 4.255037,2.45669 4.25504,2.45618 4.25452,2.45671 4.25504,-2.45671 4.25503,2.45671 4.25452,-2.45671 4.25504,-2.45618 4.25504,2.45618 4.25452,2.45671 4.25504,2.45668 4.25504,2.45671 4.25451,2.45618 4.25504,-2.45618 4.25504,2.45618 -4.25504,2.45668 -4.25504,2.45671 -4.25451,2.45618 -4.25504,2.45671 -4.25504,-2.45671 -4.25452,2.45671 -4.25504,2.45668 -4.25504,2.45671 -4.25452,2.45618 -4.25503,2.45668 4.25503,2.45671 4.25452,2.45618 -4.25452,2.45668 -4.25503,-2.45668 -4.25504,2.45668 -4.25452,2.45671 4.25452,2.45618 4.25504,2.45671 4.25503,2.45669 -4.25503,2.4567 -4.25504,-2.4567 -4.25452,-2.45669 -4.25504,-2.45671 -4.255037,-2.45618 -4.25452,2.45618 4.25452,2.45671 -4.25452,2.45669 -4.255037,2.4567 -4.255037,2.45618 -4.254521,2.45669 -4.255038,-2.45669 -4.255037,2.45669 -4.254521,2.45671 -4.255037,2.45618 4.255037,2.45668 4.254521,2.45671 4.255037,2.45671 4.255038,2.45618 4.254521,-2.45618 4.255037,-2.45671 4.255037,-2.45671 4.25452,-2.45668 4.255037,-2.45618 4.25504,2.45618 4.25452,-2.45618 4.25504,2.45618 4.25503,-2.45618 4.25452,-2.45671 4.25504,2.45671 4.25504,-2.45671 4.25452,2.45671 4.25504,-2.45671 4.25504,2.45671 4.25451,-2.45671 4.25504,-2.45669 -4.25504,-2.45618 4.25504,-2.4567 4.25504,-2.45669 4.25452,-2.45671 -4.25452,-2.45618 -4.25504,-2.45671 4.25504,-2.45668 4.25452,-2.45618 -4.25452,-2.45671 4.25452,-2.45668 4.25504,-2.45618 4.25504,-2.45671 4.25452,-2.45668 4.25503,-2.45671 -4.25503,-2.45618 -4.25452,2.45618 -4.25504,2.45671 -4.25504,-2.45671 4.25504,-2.45618 4.25504,-2.45671 -4.25504,-2.45668 4.25504,-2.45618 4.25452,-2.45671 4.25503,2.45671 4.25504,2.45618 4.25452,-2.45618 -4.25452,-2.45671 -4.25504,-2.45668 4.25504,-2.45671 4.25452,-2.45618 -4.25452,-2.45669 -4.25504,-2.45671 4.25504,-2.45618 -4.25504,-2.4567 -4.25503,-2.45669 4.25503,-2.45618 -4.25503,-2.45671 4.25503,-2.45668 -4.25503,-2.45671 4.25503,-2.45618 4.25504,-2.45671 -4.25504,-2.45668 4.25504,-2.45618 4.25452,-2.45671 -4.25452,-2.45668 4.25452,-2.45671 4.25504,-2.45618 4.25504,-2.45668 -4.25504,-2.45671 4.25504,-2.45618 4.25452,-2.45671 4.25504,-2.45668 -4.25504,-2.45618 -4.25452,-2.45671 -4.25504,-2.45669 -4.25504,-2.45671 4.25504,-2.45618 4.25504,-2.45668 4.25452,2.45668 4.25504,2.45618 -4.25504,2.45671 4.25504,2.45669 4.25503,-2.45669 4.25452,-2.45671 4.25504,-2.45618 -4.25504,-2.45668 4.25504,-2.45671 -4.25504,-2.45618 -4.25452,-2.45671 -4.25503,-2.45668 -4.25453,-2.45671 4.25453,-2.45618 -4.25504,-2.45668 z m -12.7646,7.36957 -4.25504,-2.45618 -4.25503,-2.45668 -4.25452,2.45668 -4.25504,2.45618 4.25504,2.45671 4.25452,2.45668 4.25503,-2.45668 z m -106.3718,17.19585 -4.255037,2.45671 4.255037,2.45669 4.255038,2.45671 4.254521,-2.45671 -4.254521,-2.45669 z m -25.52919,29.47882 -4.254521,2.45671 -4.255037,2.45618 4.255037,2.45668 4.254521,-2.45668 4.255037,2.45668 4.255037,-2.45668 4.254521,-2.45618 -4.254521,-2.45671 -4.255037,2.45671 z m -21.274153,2.45671 -4.255038,2.45618 -4.254521,2.45668 -4.255037,2.45671 4.255037,2.45618 4.254521,2.45671 4.255038,-2.45671 4.255037,-2.45618 4.254521,-2.45671 -4.254521,-2.45668 z m 25.52919,29.47831 -4.255037,2.45669 -4.254521,2.45618 4.254521,2.45671 4.255037,-2.45671 4.255037,2.45671 4.254521,2.45668 4.255037,-2.45668 4.254521,-2.45671 -4.254521,-2.45618 -4.255037,-2.45669 -4.254521,2.45669 z m 42.548306,9.82626 -4.25452,2.45671 4.25452,2.45618 -4.25452,2.45668 -4.255037,2.45671 4.255037,2.45618 4.25452,2.45671 4.255037,2.45668 4.25504,-2.45668 4.25452,-2.45671 -4.25452,-2.45618 -4.25504,-2.45671 4.25504,-2.45668 4.25452,-2.45618 -4.25452,-2.45671 -4.25504,2.45671 z m -12.764594,22.10874 -4.254521,2.45668 4.254521,2.45671 4.255037,-2.45671 z"
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:0.72789466;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="display:inline;opacity:1;fill:#ff05cc;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 127.10801,663.42466 -4.25504,2.45618 -4.25452,2.4567 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.4567 4.25452,2.4567 -4.25452,2.45618 -4.25504,2.4567 4.25504,2.45669 4.25452,2.45618 -4.25452,2.4567 -4.25504,2.4567 4.25504,2.4567 4.25452,2.45618 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.45618 4.25504,-2.4567 4.25503,-2.4567 4.25452,-2.4567 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.45618 4.25504,-2.45669 4.25504,-2.4567 -4.25504,-2.45618 -4.25504,2.45618 -4.25452,-2.45618 -4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.4567 z"
       id="path3466"
       inkscape:connector-curvature="0" />
    <rect
       style="fill:#e4ddbc;fill-opacity:1;fill-rule:evenodd;stroke:#4a2c73;stroke-width:0.26200545;stroke-linecap:round;stroke-linejoin:round"
       id="rect3476"
       width="338.40466"
       height="190.23801"
       x="365.25592"
       y="545.83936" />
    <path
       inkscape:connector-curvature="0"
       id="path3478"
       d="m 513.50715,592.18458 -4.25452,2.45669 -4.25504,2.4567 4.25504,2.45619 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 -4.25504,2.4567 -4.25504,2.45619 -4.25452,2.4567 -4.25503,2.45669 4.25503,2.45669 -4.25503,2.45618 -4.25504,2.45671 -4.25452,2.4567 4.25452,2.45617 4.25504,2.4567 4.25503,2.4567 -4.25503,2.4567 4.25503,2.45618 -4.25503,2.4567 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 4.25503,2.45618 4.25452,2.4567 4.25504,2.4567 4.25504,2.4567 4.25452,2.45618 4.25504,-2.45618 4.25504,2.45618 -4.25504,2.45671 -4.25504,2.45669 -4.25452,2.45617 -4.25504,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25503,2.4567 4.25503,2.4567 4.25452,2.45617 -4.25452,2.4567 -4.25503,2.45669 -4.25504,2.45618 -4.25452,2.4567 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.4567 4.25452,2.45618 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45669 4.25504,2.45618 4.25452,-2.45618 4.25504,2.45618 4.25503,-2.45618 4.25452,2.45618 4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.4567 -4.25504,-2.45618 4.25504,-2.45669 4.25504,-2.4567 4.25451,-2.4567 -4.25451,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 4.25451,-2.45618 -4.25451,-2.45669 4.25451,-2.4567 4.25504,-2.45617 4.25504,-2.4567 4.25452,-2.4567 4.25504,-2.4567 -4.25504,-2.45617 -4.25452,2.45617 -4.25504,2.4567 -4.25504,-2.4567 4.25504,-2.45617 4.25504,-2.45669 -4.25504,-2.45671 -4.25504,-2.45618 -4.25451,-2.4567 -4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.45618 -4.25504,-2.4567 -4.25504,-2.45669 4.25504,-2.45618 4.25504,2.45618 4.25452,-2.45618 4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.45618 4.25452,-2.4567 4.25504,-2.4567 4.25504,-2.4567 4.25451,-2.45617 4.25504,-2.4567 -4.25504,-2.45671 -4.25451,-2.45618 4.25451,-2.45669 4.25504,2.45669 4.25504,-2.45669 -4.25504,-2.45669 4.25504,-2.4567 4.25452,-2.45619 4.25504,-2.4567 4.25504,-2.4567 4.25452,-2.45618 4.25504,2.45618 4.25503,-2.45618 4.25452,-2.4567 4.25504,-2.4567 -4.25504,-2.45618 -4.25452,2.45618 -4.25503,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.4567 -4.25504,2.4567 -4.25504,2.4567 -4.25451,2.4567 -4.25504,2.45618 -4.25504,-2.45618 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.45619 4.25504,-2.4567 z"
       style="display:inline;opacity:1;fill:#cab736;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3480"
       d="m 500.74255,550.42329 -4.25452,2.4567 4.25452,2.45671 -4.25452,2.45617 4.25452,2.45669 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45619 4.25504,2.4567 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45618 4.25504,-2.4567 4.25451,-2.45669 -4.25451,-2.45618 -4.25504,2.45618 -4.25504,-2.45618 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.45619 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.45669 4.25504,-2.45617 -4.25504,-2.45671 -4.25452,-2.4567 -4.25504,2.4567 z m 72.33306,12.28297 -4.25504,2.4567 -4.25504,2.45619 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.45669 4.25452,2.4567 4.25504,2.45618 4.25503,2.4567 4.25452,-2.4567 -4.25452,-2.45618 4.25452,-2.4567 -4.25452,-2.45669 -4.25503,-2.45618 4.25503,-2.4567 -4.25503,-2.4567 -4.25504,-2.45619 z m -148.92011,12.28247 -4.25504,2.45669 4.25504,2.4567 4.25452,-2.4567 z m 136.15551,0 -4.25503,2.45669 -4.25504,2.4567 -4.25452,2.45618 4.25452,2.4567 -4.25452,2.4567 4.25452,2.4567 4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 4.25503,-2.4567 4.25452,2.4567 4.25504,2.45619 -4.25504,2.4567 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.4567 4.25504,-2.45619 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.45618 -4.25452,-2.4567 -4.25504,-2.4567 -4.25452,-2.4567 4.25452,-2.45618 -4.25504,-2.4567 z m -12.76459,7.36957 -4.25504,-2.45618 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,2.4567 4.25504,-2.4567 z m -50.20779,10.31772 -4.25452,2.4567 4.25452,2.45619 3.40392,1.96525 4.25504,2.4567 4.25504,-2.4567 -4.25504,-2.45619 -3.40392,-1.96525 z m 7.65896,9.33484 -4.25504,2.4567 4.25504,2.4567 4.25504,-2.4567 z m 17.01964,-4.91289 -4.25504,2.45619 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.4567 4.25504,2.45618 4.25504,-2.45618 4.25451,-2.4567 4.25504,-2.4567 -4.25504,-2.4567 z m -21.27468,12.28247 -4.25452,2.4567 -4.25503,2.4567 -4.25504,2.45618 -4.25452,2.4567 -4.25504,2.4567 -4.25504,2.45619 -4.25452,2.4567 4.25452,2.45669 4.25504,2.45669 -4.25504,2.45618 4.25504,2.45671 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45671 4.25503,-2.45618 -4.25503,-2.45669 4.25503,-2.45669 4.25452,-2.4567 4.25504,-2.45619 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 z m -17.01911,29.47884 -4.25504,2.45617 -4.25504,2.4567 -4.25452,2.4567 -4.25504,2.4567 4.25504,2.45618 -4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 -4.25504,2.45669 4.25504,2.4567 4.25504,2.45618 4.25452,2.4567 4.25504,-2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.45618 4.25504,-2.4567 4.25503,-2.4567 -4.25503,-2.45618 4.25503,-2.4567 -4.25503,-2.4567 -4.25504,-2.4567 z m -63.82298,22.10872 -4.25503,2.4567 -4.25453,2.45618 4.25453,2.4567 4.25503,-2.4567 4.25504,2.4567 4.25452,2.4567 4.25504,-2.4567 4.25451,-2.4567 -4.25451,-2.45618 -4.25504,-2.4567 -4.25452,2.4567 z m 42.5483,9.82628 -4.25452,2.4567 4.25452,2.45618 -4.25452,2.45671 -4.25504,2.45669 4.25504,2.45617 4.25452,2.4567 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.4567 -4.25452,-2.45617 -4.25504,-2.45669 4.25504,-2.45671 4.25452,-2.45618 -4.25452,-2.4567 -4.25504,2.4567 z m 29.78424,17.19585 -4.25504,2.4567 -4.25452,2.45617 -4.25504,2.4567 4.25504,2.45669 4.25452,2.45618 4.25504,-2.45618 4.25503,-2.45669 4.25452,-2.4567 -4.25452,-2.45617 z m -42.54884,4.91287 -4.25452,2.4567 4.25452,2.45669 4.25504,-2.45669 z m 12.7646,12.28297 -4.25452,2.45618 4.25452,2.4567 -4.25452,2.4567 -4.25504,2.45669 -4.25504,2.45618 -4.25452,2.4567 -4.25503,-2.4567 -4.25504,2.4567 -4.25451,2.4567 -4.25504,2.45619 4.25504,2.4567 4.25451,2.45669 4.25504,2.4567 4.25503,2.45618 4.25452,-2.45618 4.25504,-2.4567 4.25504,-2.45669 4.25452,-2.4567 4.25504,-2.45619 4.25504,2.45619 4.25452,-2.45619 4.25504,2.45619 4.25504,-2.45619 4.25452,-2.4567 4.25504,2.4567 4.25503,-2.4567 4.25452,2.4567 4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.45618 -4.25503,2.45618 -4.25504,-2.45618 -4.25452,2.45618 -4.25504,-2.45618 -4.25504,-2.45669 -4.25452,-2.4567 -4.25504,-2.4567 z"
       style="display:inline;opacity:1;fill:#c37034;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3482"
       d="m 492.233,663.4247 -4.25504,2.45618 -4.25452,2.4567 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.4567 4.25452,2.4567 -4.25452,2.45618 -4.25504,2.45671 4.25504,2.45669 4.25452,2.45617 -4.25452,2.4567 -4.25504,2.4567 4.25504,2.4567 4.25452,2.45617 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.45617 4.25504,-2.4567 4.25503,-2.4567 4.25452,-2.4567 4.25504,2.4567 4.25504,-2.4567 4.25452,-2.45617 4.25504,-2.45669 4.25504,-2.45671 -4.25504,-2.45618 -4.25504,2.45618 -4.25452,-2.45618 -4.25504,-2.4567 -4.25504,-2.4567 -4.25452,-2.4567 z"
       style="display:inline;opacity:1;fill:#5c4081;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3484"
       d="m 543.29138,589.7284 -4.25504,2.45618 -4.25452,2.45669 4.25452,2.4567 -4.25452,2.45619 4.25452,2.4567 4.25504,2.4567 4.25504,2.4567 -4.25504,2.45618 4.25504,2.4567 4.25452,-2.4567 4.25504,2.4567 4.25503,-2.4567 4.25452,-2.45618 -4.25452,-2.4567 -4.25503,-2.4567 -4.25504,-2.4567 4.25504,-2.45619 -4.25504,-2.4567 -4.25452,-2.45669 z"
       style="display:inline;opacity:1;fill:#1e9274;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3486"
       d="m 551.80094,614.29384 -4.25453,2.45618 -4.25503,2.4567 -4.25504,2.4567 -4.25452,2.45619 -4.25504,2.4567 4.25504,2.45669 -4.25504,2.45669 -4.25504,-2.45669 -4.25452,2.45669 4.25452,2.45618 4.25504,2.45671 -4.25504,2.4567 -4.25452,2.45617 -4.25504,2.4567 -4.25503,2.4567 -4.25452,2.4567 4.25452,2.45618 4.25503,2.4567 -4.25503,2.4567 -4.25452,2.45618 -4.25504,-2.45618 -4.25504,2.45618 4.25504,2.45669 4.25504,2.4567 4.25452,2.45618 4.25503,2.4567 4.25504,2.4567 4.25452,2.4567 4.25504,2.45618 4.25504,-2.45618 4.25452,-2.4567 4.25504,2.4567 4.25503,2.45618 4.25453,-2.45618 -4.25453,-2.4567 -4.25503,-2.4567 4.25503,-2.4567 4.25453,-2.45618 -4.25453,-2.4567 -4.25503,-2.45669 4.25503,-2.45618 -4.25503,-2.4567 -4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.4567 4.25504,-2.45617 4.25503,-2.4567 -4.25503,-2.45671 4.25503,-2.45618 4.25453,-2.45669 -4.25453,-2.45669 4.25453,-2.4567 4.25503,-2.45619 4.25504,-2.4567 -4.25504,-2.4567 z"
       style="display:inline;opacity:1;fill:#7a9c46;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3488"
       d="m 449.68417,624.1196 -4.25452,2.4567 -4.25504,2.45669 4.25504,2.45669 4.25452,2.45618 4.25503,2.45671 4.25504,2.4567 4.25452,2.45617 4.25504,2.4567 -4.25504,2.4567 -4.25452,-2.4567 -4.25504,2.4567 -4.25503,2.4567 -4.25452,-2.4567 -4.25504,-2.4567 -4.25504,-2.4567 -4.25451,2.4567 -4.25504,-2.4567 -4.25452,2.4567 -4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25504,2.4567 4.25451,2.45618 4.25504,2.4567 4.25504,2.4567 4.25452,-2.4567 4.25503,2.4567 4.25504,2.45618 4.25452,2.4567 4.25504,-2.4567 4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.4567 -4.25504,-2.45618 4.25504,-2.4567 4.25452,-2.4567 4.25504,-2.4567 4.25503,-2.45617 -4.25503,-2.4567 -4.25504,-2.45671 4.25504,-2.45618 -4.25504,-2.45669 -4.25452,-2.45669 -4.25504,-2.4567 -4.25504,2.4567 -4.25452,2.45669 -4.25504,-2.45669 z m -34.03874,4.91339 -4.25452,2.45669 -4.25504,2.45618 4.25504,2.45671 4.25452,-2.45671 4.25503,2.45671 4.25504,-2.45671 4.25452,-2.45618 -4.25452,-2.45669 -4.25504,2.45669 z m -21.27415,2.45669 -4.25504,2.45618 -4.25452,2.45671 -4.25504,2.4567 4.25504,2.45617 4.25452,2.4567 4.25504,-2.4567 4.25503,-2.45617 4.25452,-2.4567 -4.25452,-2.45671 z"
       style="display:inline;opacity:1;fill:#c03b2f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="path3490"
       d="m 449.68417,594.64127 -4.25452,2.4567 4.25452,2.45619 4.25503,2.4567 4.25504,2.45669 -4.25504,2.4567 -4.25503,2.45618 4.25503,2.4567 4.25504,2.45671 -4.25504,2.45618 4.25504,2.45669 4.25452,2.4567 4.25504,2.45619 4.25504,2.4567 4.25452,-2.4567 4.25504,-2.45619 4.25503,-2.4567 4.25453,-2.45669 4.25503,-2.45618 4.25504,-2.45671 4.25452,-2.4567 4.25504,2.4567 4.25504,-2.4567 -4.25504,-2.45618 -4.25504,-2.4567 4.25504,-2.45669 -4.25504,-2.4567 -4.25452,-2.45619 -4.25504,-2.4567 -4.25503,2.4567 -4.25453,2.45619 -4.25503,-2.45619 -4.25504,2.45619 -4.25452,2.4567 -4.25504,2.45669 -4.25504,-2.45669 -4.25452,-2.4567 -4.25504,-2.45619 z m -8.50956,4.91289 -4.25504,2.4567 4.25504,2.45669 4.25504,2.4567 4.25452,-2.4567 -4.25452,-2.45669 z"
       style="display:inline;opacity:1;fill:#077ba5;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <ellipse
       ry="13.215446"
       rx="12.133952"
       cy="-24.71566"
       cx="-22.860228"
       id="path3499"
       style="display:inline;opacity:1;fill:#f7f2e3;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.18520834;stroke-linecap:round;stroke-linejoin:round" />
  </g>
  <script
     id="JessyInk"
     ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
	// Make sure we only execute this code once. Double execution can occur if the onload event handler is set
	// in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
	// not lead to any problems, but it takes more time.
	if (jessyInkInitialised)
		return;

	// Making the presentation scalable.
	var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

	if (VIEWBOX)
	{
		WIDTH = ROOT_NODE.viewBox.animVal.width;
		HEIGHT = ROOT_NODE.viewBox.animVal.height;
	}
	else
	{
		HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
		WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
		ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
	}

	ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
	ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

	// Setting the background color.
	var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

	for (var counter = 0; counter &lt; namedViews.length; counter++)
	{
		if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
		{
			if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
			{
				BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
				var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

				if (ROOT_NODE.hasAttribute(&quot;style&quot;))
					newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

				ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
			}
		}
	}

	// Defining clip-path.
	var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

	if (defsNodes.length &gt; 0)
	{
		var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

		if (!existingClipPath)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
			var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);

			clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
			clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

			clipPath.appendChild(rectNode);
			defsNodes[0].appendChild(clipPath);
		}
	}

	// Making a list of the slide and finding the master slide.
	var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	var tempSlides = new Array();
	var existingJessyInkPresentationLayer = null;

	for (var counter = 0; counter &lt; nodes.length; counter++)
	{
		if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
		{
			if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
				masterSlide = nodes[counter];
			else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
				existingJessyInkPresentationLayer = nodes[counter];
			else
				tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
		}
		else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
		{
			handleElement(nodes[counter]);
		}
	}

	// Hide master slide set default transitions.
	if (masterSlide)
	{
		masterSlide.style.display = &quot;none&quot;;

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
	}

	if (existingJessyInkPresentationLayer != null)
	{
		existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
	}

	// Set start slide.
	var hashObj = new LocationHash(window.location.hash);

	activeSlide = hashObj.slideNumber;
	activeEffect = hashObj.effectNumber;

	if (activeSlide &lt; 0)
		activeSlide = 0;
	else if (activeSlide &gt;= tempSlides.length)
		activeSlide = tempSlides.length - 1;

	var originalNode = document.getElementById(tempSlides[counter]);

	var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
	JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
	JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
	ROOT_NODE.appendChild(JessyInkPresentationLayer);

	// Gathering all the information about the transitions and effects of the slides, set the background
	// from the master slide and substitute the auto-texts.
	for (var counter = 0; counter &lt; tempSlides.length; counter++)
	{
		var originalNode = document.getElementById(tempSlides[counter]);
		originalNode.style.display = &quot;none&quot;;
		var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
		JessyInkPresentationLayer.appendChild(node);
		slides[counter] = new Object();
		slides[counter][&quot;original_element&quot;] = originalNode;
		slides[counter][&quot;element&quot;] = node;

		// Set build in transition.
		slides[counter][&quot;transitionIn&quot;] = new Object();

		var dict;

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
		else
			dict = defaultTransitionInDict;

		slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

		// Set build out transition.
		slides[counter][&quot;transitionOut&quot;] = new Object();

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
		else
			dict = defaultTransitionOutDict;

		slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

		// Copy master slide content.
		if (masterSlide)
		{
			var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
			clonedNode.style.display = &quot;inherit&quot;;

			node.insertBefore(clonedNode, node.firstChild);
		}

		// Setting clip path.
		node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

		// Substitute auto texts.
		substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

		// Set effects.
		var tempEffects = new Array();
		var groups = new Object();

		for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
		{
			var propName = &quot;&quot;;
			var dir = 0;

			if (IOCounter == 0)
			{
				propName = &quot;effectIn&quot;;
				dir = 1;
			}
			else if (IOCounter == 1)
			{
				propName = &quot;effectOut&quot;;
				dir = -1;
			}

			var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

			for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
			{
				var element = document.getElementById(effects[effectCounter]);
				var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

				// Put every element that has an effect associated with it, into its own group.
				// Unless of course, we already put it into its own group.
				if (!(groups[element.id]))
				{
					var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

					element.parentNode.insertBefore(newGroup, element);
					newGroup.appendChild(element.parentNode.removeChild(element));
					groups[element.id] = newGroup;
				}

				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = dir;
				effectDict[&quot;element&quot;] = groups[element.id];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				if (!tempEffects[dict[&quot;order&quot;]])
					tempEffects[dict[&quot;order&quot;]] = new Array();

				tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
			}
		}

		// Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
		node.setAttribute(&quot;opacity&quot;,0);
		node.style.display = &quot;inherit&quot;;

		// Create a transform group.
		var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		// Add content to transform group.
		while (node.firstChild)
			transformGroup.appendChild(node.firstChild);

		// Transfer the transform attribute from the node to the transform group.
		if (node.getAttribute(&quot;transform&quot;))
		{
			transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
			node.removeAttribute(&quot;transform&quot;);
		}

		// Create a view group.
		var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		viewGroup.appendChild(transformGroup);
		slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

		// Insert background.
		if (BACKGROUND_COLOR != null)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);
			rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
			rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

			slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
		}

		// Set views.
		var tempViews = new Array();
		var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
		var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

		// Set initial view even if there are no other views.
		slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
		slides[counter].initialView = matrixOld.toAttribute();

		for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
		{
			var element = document.getElementById(views[viewCounter]);
			var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

			if (dict[&quot;order&quot;] == 0)
			{
				matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
				slides[counter].initialView = matrixOld.toAttribute();
			}
			else
			{
				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = 1;
				effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
				effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

				tempViews[dict[&quot;order&quot;]] = effectDict;
			}

			// Remove element.
			element.parentNode.removeChild(element);
		}

		// Consolidate view array and append it to the effect array.
		if (tempViews.length &gt; 0)
		{
			for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
			{
				if (tempViews[viewCounter])
				{
					tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
					matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

					if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
						tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

					tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
				}
			}
		}

		// Set consolidated effect array.
		if (tempEffects.length &gt; 0)
		{
			slides[counter][&quot;effects&quot;] = new Array();

			for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
			{
				if (tempEffects[effectCounter])
					slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
			}
		}

		node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

		// Set visibility for initial state.
		if (counter == activeSlide)
		{
			node.style.display = &quot;inherit&quot;;
			node.setAttribute(&quot;opacity&quot;,1);
		}
		else
		{
			node.style.display = &quot;none&quot;;
			node.setAttribute(&quot;opacity&quot;,0);
		}
	}

	// Set key handler.
	var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
	{
		var elem = jessyInkObjects[counter];

		if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
		{
			if (elem.getCustomKeyBindings != undefined)
				keyCodeDictionary = elem.getCustomKeyBindings();

			if (elem.getCustomCharBindings != undefined)
				charCodeDictionary = elem.getCustomCharBindings();
		}
	}

	// Set mouse handler.
	var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

	for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
	{
		var elem = jessyInkMouseHandler[counter];

		if (elem.getMouseHandler != undefined)
		{
			var tempDict = elem.getMouseHandler();

			for (mode in tempDict)
			{
				if (!mouseHandlerDictionary[mode])
					mouseHandlerDictionary[mode] = new Object();

				for (handler in tempDict[mode])
					mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
			}
		}
	}

	// Check effect number.
	if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
	{
		activeEffect = 0;
	}
	else if (activeEffect &gt; slides[activeSlide].effects.length)
	{
		activeEffect = slides[activeSlide].effects.length;
	}

	createProgressBar(JessyInkPresentationLayer);
	hideProgressBar();
	setProgressBarValue(activeSlide);
	setTimeIndicatorValue(0);
	setInterval(&quot;updateTimer()&quot;, 1000);
	setSlideToState(activeSlide, activeEffect);
	jessyInkInitialised = true;
}

/** Function to subtitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
	var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

	for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
	{
		if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
			texts[textCounter].firstChild.nodeValue = slideNumber;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
			texts[textCounter].firstChild.nodeValue = numberOfSlides;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
			texts[textCounter].firstChild.nodeValue = slideName;
	}
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *	This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
	var elems = new Array();

	if (node.getAttributeNS(namespace, name))
		elems.push(node.getAttribute(&quot;id&quot;));

	for (var counter = 0; counter &lt; node.childNodes.length; counter++)
	{
		if (node.childNodes[counter].nodeType == 1)
			elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
	}

	return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (dir == 1)
		{
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
			activeEffect += dir;
		}
		else if (dir == -1)
		{
			activeEffect += dir;
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
		}

		transCounter = 0;
		startTime = (new Date()).getTime();
		lastFrameTime = null;
		effect(dir);
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
			activeEffect = slides[activeSlide][&quot;effects&quot;].length;
		else
			activeEffect = 0;

		if (dir == 1)
			setSlideToState(activeSlide, STATE_END);
		else
			setSlideToState(activeSlide, STATE_START);

		processingEffect = false;
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
	processingEffect = true;
	effectArray = new Array();

	effectArray[0] = new Object();
	if (dir == 1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = -1;
	}
	else if (dir == -1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = 1;
	}
	effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	activeSlide += dir;
	setProgressBarValue(activeSlide);

	effectArray[1] = new Object();

	if (dir == 1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = 1;
	}
	else if (dir == -1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = -1;
	}

	effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
		activeEffect = slides[activeSlide][&quot;effects&quot;].length;
	else
		activeEffect = 0;

	if (dir == -1)
		setSlideToState(activeSlide, STATE_END);
	else
		setSlideToState(activeSlide, STATE_START);

	transCounter = 0;
	startTime = (new Date()).getTime();
	lastFrameTime = null;
	effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
	var suspendHandle = ROOT_NODE.suspendRedraw(500);

	if (currentMode == SLIDE_MODE)
	{
		hideProgressBar();		
		INDEX_OFFSET = -1;
		indexSetPageSlide(activeSlide);
		currentMode = INDEX_MODE;
	}
	else if (currentMode == INDEX_MODE)
	{
		for (var counter = 0; counter &lt; slides.length; counter++)
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

			if (counter == activeSlide)
			{
				slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
				activeEffect = 0;
			}
			else
			{
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
				slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
			}
		}
		currentMode = SLIDE_MODE;
		setSlideToState(activeSlide, STATE_START);
		setProgressBarValue(activeSlide);

		if (progress_bar_visible)
		{
			showProgressBar();
		}
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
	var done = true;

	var suspendHandle = ROOT_NODE.suspendRedraw(200);

	for (var counter = 0; counter &lt; effectArray.length; counter++)
	{
		if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
			done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
			done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
			done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
			done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();

	if (!done)
	{
		var currentTime = (new Date()).getTime();
		var timeDiff = 1;

		transCounter = currentTime - startTime;

		if (lastFrameTime != null)
		{
			timeDiff = timeStep - (currentTime - lastFrameTime);

			if (timeDiff &lt;= 0)
				timeDiff = 1;
		}

		lastFrameTime = currentTime;

		window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
	}
	else
	{
		window.location.hash = (activeSlide + 1) + '_' + activeEffect;
		processingEffect = false;
	}
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
	var offsetX = 0;
	var offsetY = 0;

	if (offsetNumber &lt; 0)
		offsetNumber = 0;
	else if (offsetNumber &gt;= slides.length)
		offsetNumber = slides.length - 1;

	for (var counter = 0; counter &lt; slides.length; counter++)
	{
		if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
			slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
		}
		else
		{
			offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
			offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
			slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
		}

		setSlideToState(counter, STATE_END);
	}

	//do we need to save the current offset?
	if (INDEX_OFFSET != offsetNumber)
		INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

	activeSlide = parseInt(nbr);

	setSlideToState(activeSlide, STATE_START);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

	activeEffect = 0;
	setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

	activeSlide = parseInt(nbr);
	window.location.hash = (activeSlide + 1) + '_0';

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view. 
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	//calculate the offset
	var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

	if (offset &lt; 0)
		offset = 0;

	//if different from kept offset, then record and change the page
	if (offset != INDEX_OFFSET)
	{
		INDEX_OFFSET = offset;
		displayIndex(INDEX_OFFSET);
	}

	//set the active slide
	indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
	if (!e)
		e = window.event;

	code = e.keyCode || e.charCode;

	if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
		return keyCodeDictionary[currentMode][code]();
	else
		document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
	document.onkeypress = null;

	if (!e)
		e = window.event;

	str = String.fromCharCode(e.keyCode || e.charCode);

	if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
		return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
	var charCodeDict = new Object();

	charCodeDict[SLIDE_MODE] = new Object();
	charCodeDict[INDEX_MODE] = new Object();
	charCodeDict[DRAWING_MODE] = new Object();

	charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
	charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
	charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
	charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
	charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
	charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

	charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
	charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
	charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
	charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
	charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
	charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
	charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
	charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
	charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
	charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
	charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
	charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
	charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
	charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
	charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
	charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
	charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

	charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

	return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
	var keyCodeDict = new Object();

	keyCodeDict[SLIDE_MODE] = new Object();
	keyCodeDict[INDEX_MODE] = new Object();
	keyCodeDict[DRAWING_MODE] = new Object();

	keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
	keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
	keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
	keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
	keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

	keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
	keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
	keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
	keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
	keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

	keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

	return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *	@param	evnt	event
 *	@param	action	type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
	if (!evnt)
		evnt = window.event;

	var retVal = true;

	if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
	{
		var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

		if (subRetVal != null &amp;&amp; subRetVal != undefined)
			retVal = subRetVal;
	}

	if (evnt.preventDefault &amp;&amp; !retVal)
		evnt.preventDefault();

	evnt.returnValue = retVal;

	return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
	window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
	var mouseHandlerDict = new Object();

	mouseHandlerDict[SLIDE_MODE] = new Object();
	mouseHandlerDict[INDEX_MODE] = new Object();
	mouseHandlerDict[DRAWING_MODE] = new Object();

	mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
	mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

	mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

	mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

	return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
	currentMode = DRAWING_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
	currentMode = SLIDE_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &gt;= 3)
	{
		INDEX_COLUMNS -= 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &lt; 7)
	{
		INDEX_COLUMNS += 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
	if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
	{
		INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
	path_width = path_width_default;
	set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
	path_width = width;
	set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
	path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
	var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

	if ((new_duration != null) &amp;&amp; (new_duration != ''))
	{
		timer_duration = new_duration;
	}

	updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
	addSlide(afterSlide);
	slideSetActiveSlide(afterSlide + 1);
	updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
	if (progress_bar_visible)
	{
		progress_bar_visible = false;
		hideProgressBar();
	}
	else
	{
		progress_bar_visible = true;
		showProgressBar();
	}
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
	timer_start = timer_elapsed;
	updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
	var outStr = str;

	while (outStr.length &lt; len)
	{
		outStr = '0' + outStr;
	}

	return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
	// Suspend redraw since we are going to mess with the slides.
	var suspendHandle = ROOT_NODE.suspendRedraw(2000);

	var tmpActiveSlide = activeSlide;
	var tmpActiveEffect = activeEffect;
	var exportedLayers = new Array();

	for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
	{
		var exportNode;

		setSlideToState(counterSlides, STATE_START);

		var maxEffect = 0;

		if (slides[counterSlides].effects)
		{
			maxEffect = slides[counterSlides].effects.length;
		}

		exportNode = slides[counterSlides].element.cloneNode(true);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

		exportedLayers.push(exportNode);

		if (slides[counterSlides][&quot;effects&quot;])
		{	
			for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}

				var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
				exportNode = slides[counterSlides].element.cloneNode(true);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
				exportNode.setAttribute(&quot;id&quot;, layerName);

				exportedLayers.push(exportNode);
			}
		}
	}

	activeSlide = tmpActiveSlide;
	activeEffect = tmpActiveEffect;
	setSlideToState(activeSlide, activeEffect);

	// Copy image.
	var newDoc = document.documentElement.cloneNode(true);

	// Delete viewbox form new imag and set width and height.
	newDoc.removeAttribute('viewbox');
	newDoc.setAttribute('width', WIDTH);
	newDoc.setAttribute('height', HEIGHT);

	// Delete all layers and script elements.
	var nodesToBeRemoved = new Array();

	for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
	{
		var child = newDoc.childNodes[childCounter];

		if (child.nodeType == 1)
		{
			if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
			{
				nodesToBeRemoved.push(child);
			}
		}
	}

	for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
	{
		var nd = nodesToBeRemoved[ndCounter];

		// Before removing the node, check whether it contains any definitions.
		var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

		for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
		{
			if (defs[defsCounter].id)
			{
				newDoc.appendChild(defs[defsCounter].cloneNode(true));
			}
		}

		// Remove node.
		nd.parentNode.removeChild(nd);
	}

	// Set current layer.
	if (exportedLayers[0])
	{
		var namedView;

		for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
		{
			if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
			{
				namedView = newDoc.childNodes[nodeCounter];
			}
		}

		if (namedView)
		{
			namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
		}
	}

	// Add exported layers.
	while (exportedLayers.length &gt; 0)
	{
		var nd = exportedLayers.pop();

		nd.setAttribute(&quot;opacity&quot;,1);
		nd.style.display = &quot;inherit&quot;;

		newDoc.appendChild(nd);
	}

	// Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

	// Unsuspend redraw.
	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
	mouse_presentation_path = null;
	mouse_original_path = null;

	if (history_presentation_elements.length &gt; 0)
	{
		var p = history_presentation_elements.pop();
		var parent = p.parentNode.removeChild(p);

		p = history_original_elements.pop();
		parent = p.parentNode.removeChild(p);
	}
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
	var value = 0;

	if (e.button)
		value = e.button;
	else if (e.which)
		value = e.which;

	if (value == 1)
	{
		history_counter++;

		var p = calcCoord(e);

		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
		mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
		mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
		slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
		history_original_elements.push(mouse_original_path);

		mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
		mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

		if (slides[activeSlide][&quot;viewGroup&quot;])
			slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
		else
			slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

		history_presentation_elements.push(mouse_presentation_path);

		return false;
	}

	return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
	if(!e)
		e = window.event;

	if (mouse_presentation_path != null)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_presentation_path = null;
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path = null;

		return false;
	}

	return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
	if(!e)
		e = window.event;

	var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

	if (mouse_presentation_path == null)
	{
		return true;
	}

	if (dist &gt;= mouse_min_dist_sqr)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
	}

	return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		skipEffects(-1);
	else if (delta &lt; 0)
		skipEffects(1);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
	else if (delta &lt; 0)
		indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
	var svgPoint1 = document.documentElement.createSVGPoint();
	var svgPoint2 = document.documentElement.createSVGPoint();

	svgPoint1.x = 0.0;
	svgPoint1.y = 0.0;
	svgPoint2.x = 1.0;
	svgPoint2.y = 0.0;

	var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

	svgPoint1 = svgPoint1.matrixTransform(matrix);
	svgPoint2 = svgPoint2.matrixTransform(matrix);

	path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if (!options[&quot;matrixInitial&quot;])
	{
		var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

		if (tempString)
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
		else
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
	}

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
		}
	}

	return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;none&quot;;
			element.setAttribute(&quot;opacity&quot;, 0);
		}
		else if (fraction &gt;= 1)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, fraction);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
		}
	}
	return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
	if (dir == 1)
	{
		element.style.display = &quot;inherit&quot;;
		element.setAttribute(&quot;opacity&quot;,1);
	}
	else if (dir == -1)
	{
		element.style.display = &quot;none&quot;;
		element.setAttribute(&quot;opacity&quot;,0);
	}
	return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
	var length = 500;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
			element.style.display = &quot;none&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;inherit&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			var opacityFraction = fraction * 3;
			if (opacityFraction &gt; 1)
				opacityFraction = 1;
			element.setAttribute(&quot;opacity&quot;, opacityFraction);
			var offsetX = WIDTH * (1.0 - fraction) / 2.0;
			var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
			element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
			element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
	}
	return false;
}

/** Function to set a slide either to the start or the end state.
 *  
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
	slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

	if (slides[slide][&quot;effects&quot;])
	{	
		if (state == STATE_END)
		{
			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
		else if (state == STATE_START)
		{
			for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
				}
			}
		}
		else
		{
			setSlideToState(slide, STATE_START);

			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
	}

	window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *	@param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
	var list = str.split(&quot;;&quot;);
	var obj = new Object();

	for (var counter = 0; counter &lt; list.length; counter++)
	{
		var subStr = list[counter];
		var subList = subStr.split(&quot;:&quot;);
		if (subList.length == 2)
		{
			obj[subList[0]] = subList[1];
		}	
	}

	return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
	var str = &quot;&quot;;

	for (var key in dict)
	{
		str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
	}

	return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *	@param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
	if (node.nodeType == 1)
	{
		if (node.getAttribute(&quot;id&quot;))
		{
			var id = node.getAttribute(&quot;id&quot;)
				replace[&quot;#&quot; + id] = id + suffix;
			node.setAttribute(&quot;id&quot;, id + suffix);
		}

		if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
			node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

		if (node.childNodes)
		{
			for (var counter = 0; counter &lt; node.childNodes.length; counter++)
				suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
		}
	}
}

/** Function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
	var replace = new Object();

	suffixNoneIds_sub(node, suffix, replace);

	return node;
}

/** Function to build a progress bar.
 *	
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
	rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
	rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
	rect_progress_bar.setAttribute(&quot;x&quot;, 0);
	rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
	rect_progress_bar.setAttribute(&quot;width&quot;, 0);
	rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
	g.appendChild(rect_progress_bar);

	var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
	circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
	circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
	circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
	g.appendChild(circle_timer_indicator);

	parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *	
 */
function hideProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *	
 */
function showProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *	
 *	@param value the current slide number
 *
 */
function setProgressBarValue(value)
{
	var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

	if (!rect_progress_bar)
	{
		return;
	}

	if (value &lt; 1)
	{
		// First slide, assumed to be the title of the presentation
		var x = 0;
		var w = 0.01 * HEIGHT;
	}
	else if (value &gt;= slides.length - 1)
	{
		// Last slide, assumed to be the end of the presentation
		var x = WIDTH - 0.01 * HEIGHT;
		var w = 0.01 * HEIGHT;
	}
	else
	{
		value -= 1;
		value /= (slides.length - 2);

		var x = WIDTH * value;
		var w = WIDTH / (slides.length - 2);
	}

	rect_progress_bar.setAttribute(&quot;x&quot;, x);
	rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *	
 *	@param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
	var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

	if (!circle_timer_indicator)
	{
		return;
	}

	if (value &lt; 0.0)
	{
		value = 0.0;
	}

	if (value &gt; 1.0)
	{
		value = 1.0;
	}

	var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
	circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *	
 */
function updateTimer()
{
	timer_elapsed += 1;
	setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system	
 */
function calcCoord(e)
{
	var svgPoint = document.documentElement.createSVGPoint();
	svgPoint.x = e.clientX + window.pageXOffset;
	svgPoint.y = e.clientY + window.pageYOffset;

	var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

	svgPoint = svgPoint.matrixTransform(matrix.inverse());
	return svgPoint;
}

/** Add slide.
 *
 *	@param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
	number_of_added_slides++;

	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var new_slide = new Object();
	new_slide[&quot;element&quot;] = g;

	// Set build in transition.
	new_slide[&quot;transitionIn&quot;] = new Object();
	var dict = defaultTransitionInDict;
	new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

	// Set build out transition.
	new_slide[&quot;transitionOut&quot;] = new Object();
	dict = defaultTransitionOutDict;
	new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

	// Copy master slide content.
	if (masterSlide)
	{
		var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
		clonedNode.style.display = &quot;inherit&quot;;

		g.appendChild(clonedNode);
	}

	// Substitute auto texts.
	substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

	g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

	// Create a transform group.
	var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	// Add content to transform group.
	while (g.firstChild)
		transformGroup.appendChild(g.firstChild);

	// Transfer the transform attribute from the node to the transform group.
	if (g.getAttribute(&quot;transform&quot;))
	{
		transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
		g.removeAttribute(&quot;transform&quot;);
	}

	// Create a view group.
	var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	viewGroup.appendChild(transformGroup);
	new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

	// Insert background.
	if (BACKGROUND_COLOR != null)
	{
		var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

		rectNode.setAttribute(&quot;x&quot;, 0);
		rectNode.setAttribute(&quot;y&quot;, 0);
		rectNode.setAttribute(&quot;width&quot;, WIDTH);
		rectNode.setAttribute(&quot;height&quot;, HEIGHT);
		rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
		rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

		new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
	}

	// Set initial view even if there are no other views.
	var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

	new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
	new_slide.initialView = matrixOld.toAttribute();

	// Insert slide
	var node = slides[after_slide][&quot;element&quot;];
	var next_node = node.nextSibling;
	var parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	new_slide[&quot;original_element&quot;] = g;

	node = slides[after_slide][&quot;original_element&quot;];
	next_node = node.nextSibling;
	parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	before_new_slide = slides.slice(0, after_slide + 1);
	after_new_slide = slides.slice(after_slide + 1);
	slides = before_new_slide.concat(new_slide, after_new_slide);

	//resetting the counter attributes on the slides that follow the new slide...
	for (var counter = after_slide+2; counter &lt; slides.length; counter++)
	{
		slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
	}
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *	@param mPoints Point matrix.
 *	@return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
	mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

	return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *	@param rect an svg rectangle
 *	@return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
	rectWidth = rect.getBBox().width;
	rectHeight = rect.getBBox().height;
	rectX = rect.getBBox().x;
	rectY = rect.getBBox().y;
	rectXcorr = 0;
	rectYcorr = 0;

	scaleX = WIDTH / rectWidth;
	scaleY = HEIGHT / rectHeight;

	if (scaleX &gt; scaleY)
	{
		scaleX = scaleY;
		rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
		rectWidth = WIDTH / scaleX;
	}	
	else
	{
		scaleY = scaleX;
		rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
		rectHeight = HEIGHT / scaleY;
	}

	if (rect.transform.baseVal.numberOfItems &lt; 1)
	{
		mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
	}
	else
	{
		mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
	}

	newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
	newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

	return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *	@param	node	Element node.
 */
function handleElement(node)
{
	if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
	{
		var url;
		var width;
		var height;
		var x;
		var y;
		var transform;

		var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

		for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
		{
			if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
			{
				url = tspans[tspanCounter].firstChild.nodeValue;
			}
		}

		var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

		for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
		{
			if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
			{
				x = rects[rectCounter].getAttribute(&quot;x&quot;);
				y = rects[rectCounter].getAttribute(&quot;y&quot;);
				width = rects[rectCounter].getAttribute(&quot;width&quot;);
				height = rects[rectCounter].getAttribute(&quot;height&quot;);
				transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
			}
		}

		for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
		{
			if (node.childNodes[childCounter].nodeType == 1)
			{
				if (node.childNodes[childCounter].style)
				{
					node.childNodes[childCounter].style.display = 'none';
				}
				else
				{
					node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
				}
			}
		}

		var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
		foreignNode.setAttribute(&quot;x&quot;, x);
		foreignNode.setAttribute(&quot;y&quot;, y);
		foreignNode.setAttribute(&quot;width&quot;, width);
		foreignNode.setAttribute(&quot;height&quot;, height);
		foreignNode.setAttribute(&quot;transform&quot;, transform);

		var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
		videoNode.setAttribute(&quot;src&quot;, url);

		foreignNode.appendChild(videoNode);
		node.appendChild(foreignNode);
	}
}

/** Class processing the location hash.
 *
 *	@param str location hash
 */
function LocationHash(str)
{
	this.slideNumber = 0;
	this.effectNumber = 0;

	str = str.substr(1, str.length - 1);

	var parts = str.split('_');

	// Try to extract slide number.
	if (parts.length &gt;= 1)
	{
		try
		{
			var slideNumber = parseInt(parts[0]);

			if (!isNaN(slideNumber))
			{
				this.slideNumber = slideNumber - 1;
			}
		}
		catch (e)
		{
		}
	}
	
	// Try to extract effect number.
	if (parts.length &gt;= 2)
	{
		try
		{
			var effectNumber = parseInt(parts[1]);

			if (!isNaN(effectNumber))
			{
				this.effectNumber = effectNumber;
			}
		}
		catch (e)
		{
		}
	}
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
	this.e11 = 0; // a
	this.e12 = 0; // c
	this.e13 = 0; // e
	this.e21 = 0; // b
	this.e22 = 0; // d
	this.e23 = 0; // f
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 0;
}

/** Constructor function.
 *
 *	@param a element a (i.e. 1, 1) as described in the svg standard.
 *	@param b element b (i.e. 2, 1) as described in the svg standard.
 *	@param c element c (i.e. 1, 2) as described in the svg standard.
 *	@param d element d (i.e. 2, 2) as described in the svg standard.
 *	@param e element e (i.e. 1, 3) as described in the svg standard.
 *	@param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
	this.e11 = a;
	this.e12 = c;
	this.e13 = e;
	this.e21 = b;
	this.e22 = d;
	this.e23 = f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
	this.e11 = m.a;
	this.e12 = m.c;
	this.e13 = m.e;
	this.e21 = m.b;
	this.e22 = m.d;
	this.e23 = m.f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param e11 element 1, 1 of the matrix.
 *	@param e12 element 1, 2 of the matrix.
 *	@param e13 element 1, 3 of the matrix.
 *	@param e21 element 2, 1 of the matrix.
 *	@param e22 element 2, 2 of the matrix.
 *	@param e23 element 2, 3 of the matrix.
 *	@param e31 element 3, 1 of the matrix.
 *	@param e32 element 3, 2 of the matrix.
 *	@param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;

	return this;
}

/** Constructor function.
 *
 *	@param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
	str = attrString.substr(7, attrString.length - 8);

	str = str.trim();

	strArray = str.split(&quot;,&quot;);

	// Opera does not use commas to separate the values of the matrix, only spaces.
	if (strArray.length != 6)
		strArray = str.split(&quot; &quot;);

	this.e11 = parseFloat(strArray[0]);
	this.e21 = parseFloat(strArray[1]);
	this.e31 = 0;
	this.e12 = parseFloat(strArray[2]);
	this.e22 = parseFloat(strArray[3]);
	this.e32 = 0;
	this.e13 = parseFloat(strArray[4]);
	this.e23 = parseFloat(strArray[5]);
	this.e33 = 1;

	return this;
}

/** Output function
 *
 *	@return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
	return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *	@return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
	out = new matrixSVG();

	det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

	out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
	out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
	out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
	out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
	out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
	out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
	out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
	out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
	out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

	return out;
}

/** Matrix multiplication.
 *
 *	@param op another svg matrix
 *	@return this * op
 */
matrixSVG.prototype.mult = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
	out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
	out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
	out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
	out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
	out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
	out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
	out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
	out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

	return out;
}

/** Matrix addition.
 *
 *	@param op another svg matrix
 *	@return this + op
 */
matrixSVG.prototype.add = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 + op.e11;
	out.e12 = this.e12 + op.e12;
	out.e13 = this.e13 + op.e13;
	out.e21 = this.e21 + op.e21;
	out.e22 = this.e22 + op.e22;
	out.e23 = this.e23 + op.e23;
	out.e31 = this.e31 + op.e31;
	out.e32 = this.e32 + op.e32;
	out.e33 = this.e33 + op.e33;

	return out;
}

/** Matrix mixing.
 *
 *	@param op another svg matrix
 *	@parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *	@return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
	contribThis = 1.0 - contribOp;
	out = new matrixSVG();

	out.e11 = contribThis * this.e11 + contribOp * op.e11;
	out.e12 = contribThis * this.e12 + contribOp * op.e12;
	out.e13 = contribThis * this.e13 + contribOp * op.e13;
	out.e21 = contribThis * this.e21 + contribOp * op.e21;
	out.e22 = contribThis * this.e22 + contribOp * op.e22;
	out.e23 = contribThis * this.e23 + contribOp * op.e23;
	out.e31 = contribThis * this.e31 + contribOp * op.e31;
	out.e32 = contribThis * this.e32 + contribOp * op.e32;
	out.e33 = contribThis * this.e33 + contribOp * op.e33;

	return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
	return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
</script>
</svg>
